{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "### IMPORTS ###\n",
    "import os, glob, re, time\n",
    "import numpy as np, pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pickle as pkl\n",
    "import sklearn\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import Binarizer\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "## Models\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier # KNN c\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from xgboost import plot_importance\n",
    "import lightgbm as lgb\n",
    "from catboost import CatBoostClassifier\n",
    "\n",
    "## Evaluation\n",
    "from sklearn.metrics import roc_curve, auc, confusion_matrix, classification_report\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "### GLOBAL VARIABLES ###\n",
    "RAND_STATE = 0\n",
    "N_FOLDS = 5\n",
    "\n",
    "### FUNCTIONS ###\n",
    "def getPredictions(X):\n",
    "    \"\"\" Converts probabilities in df to labels\n",
    "    Args:\n",
    "        X (dataframe): Columns correponds to probabilities of different models\n",
    "    Returns:\n",
    "        dataframe: Predicted labels (0 or 1)\n",
    "    \"\"\"\n",
    "    predictions = np.zeros(X.shape)\n",
    "    predictions[X > 0.5] = 1\n",
    "    return pd.DataFrame(predictions, columns=list(X))\n",
    "  \n",
    "def calcNCombinations(params_grid):\n",
    "    '''Calculates number of all possible combinations'''\n",
    "    list_lengths = [len(x) for x in params_grid.values()]\n",
    "    return np.prod(list_lengths)\n",
    "  \n",
    "def runRandSearchCV(model, params_grid, params_search,\n",
    "                    X_alltrain, y_alltrain, filename, params_fit={}):\n",
    "    '''Run randomized cross-validation grid search and pickle best parameters'''\n",
    "    \n",
    "    print(\"Number of all possible combinations:\",\n",
    "          calcNCombinations(params_grid))\n",
    "\n",
    "    # Random search of parameters across n_iter different\n",
    "    # combinations using all available cores\n",
    "    grid_search = RandomizedSearchCV(\n",
    "        estimator=model,\n",
    "        param_distributions=params_grid,\n",
    "        n_jobs=-1,\n",
    "        **params_search\n",
    "    )\n",
    "    \n",
    "    start_time = time.time()\n",
    "    grid_search.fit(X_alltrain, y_alltrain, **params_fit) # Grid search fit!\n",
    "    elapsed_time = time.time() - start_time\n",
    "    print(\"Model fit duration:\",\n",
    "          time.strftime(\"%H h %M min %S s\", time.gmtime(elapsed_time)))\n",
    "    \n",
    "    params_wpath = os.path.join(\"dump/params/\", filename)\n",
    "    print(\"Saved grid search results to: {}\\n\".format(params_wpath))\n",
    "    with open(params_wpath, \"wb\") as f:\n",
    "        pkl.dump(grid_search.cv_results_, f)\n",
    "        \n",
    "    return grid_search.cv_results_\n",
    "\n",
    "def getGridSearchParams(filename):\n",
    "    params_path = os.path.join(\"dump/params/\", filename)\n",
    "    with open(params_path, \"rb\") as f:\n",
    "        results_dict = pkl.load(f)\n",
    "    results = pd.DataFrame(results_dict)\n",
    "    \n",
    "    # Best params (Accuracy)\n",
    "    idx_acc = results.mean_test_accuracy.idxmax()\n",
    "    print(\"Best params (Accuracy): {}\".format(results.params[idx_acc]))\n",
    "    print(\"Training accuracy: {:.3f} +/- {:.3f}%\".format(\n",
    "        results.mean_train_accuracy[idx_acc]*100,\n",
    "        results.std_train_accuracy[idx_acc]*100))\n",
    "    print(\"Validation accuracy: {:.3f} +/- {:.3f}%\\n\".format(\n",
    "        results.mean_test_accuracy[idx_acc]*100,\n",
    "        results.std_test_accuracy[idx_acc]*100))\n",
    "\n",
    "    # Best params (F1)\n",
    "    idx_f1 = results.mean_test_f1.idxmax()\n",
    "    print(\"Best params (F1): {}\".format(results.params[idx_f1]))\n",
    "    print(\"Training F1: {:.3f} +/- {:.3f}%\".format(\n",
    "        results.mean_train_f1[idx_f1]*100,\n",
    "        results.std_train_f1[idx_f1]*100))\n",
    "    print(\"Validation F1: {:.3f} +/- {:.3f}%\".format(\n",
    "        results.mean_test_f1[idx_f1]*100,\n",
    "        results.std_test_f1[idx_f1]*100))\n",
    "    print(\"Training accuracy: {:.3f} +/- {:.3f}%\".format(\n",
    "        results.mean_train_accuracy[idx_f1]*100,\n",
    "        results.std_train_accuracy[idx_f1]*100))\n",
    "    print(\"Validation accuracy: {:.3f} +/- {:.3f}%\\n\".format(\n",
    "        results.mean_test_accuracy[idx_f1]*100,\n",
    "        results.std_test_accuracy[idx_f1]*100))\n",
    "    \n",
    "    return (results.params[idx_acc], results.params[idx_f1], results)\n",
    "\n",
    "def runL1ModelCV(model, X_alltrain, y_alltrain, X_test=None,\n",
    "                 cv_filename=None, submission_filename=None,\n",
    "                 best_threshold=False, n_folds=N_FOLDS, random_state=RAND_STATE,\n",
    "                 **kwargs):\n",
    "    '''Performs cross-validation on L1 model to \n",
    "    2) determine optimal prediction threshold 3) return CV metrics 4) predict test set\n",
    "    \n",
    "    Does not perform early_stopping_rounds when trained with entire training dataset!\n",
    "    '''\n",
    "    \n",
    "    skf = StratifiedKFold(n_splits=n_folds, shuffle=False)\n",
    "#     skf = StratifiedKFold(n_splits=n_folds, shuffle=True,\n",
    "#                           random_state=random_state)\n",
    "    \n",
    "    list_thresholds = []\n",
    "    list_accs = []\n",
    "    list_ypred_train = []\n",
    "    list_y_train = []\n",
    "    list_ypred_vld = []\n",
    "    list_y_vld = []\n",
    "    p_alltrain = np.zeros(X_alltrain.shape[0]) # Initialise probabilties\n",
    "    for i, (train_idx, vld_idx) in enumerate(skf.split(X_alltrain, y_alltrain)):\n",
    "        print(\"#\"*10)\n",
    "        print(\"Fold\", i)\n",
    "        print(\"#\"*10)\n",
    "        X_train = X_alltrain.iloc[train_idx,:]\n",
    "        y_train = y_alltrain.iloc[train_idx]\n",
    "        X_vld = X_alltrain.iloc[vld_idx,:]\n",
    "        y_vld = y_alltrain.iloc[vld_idx]\n",
    "        \n",
    "        model.fit(X_train, y_train, **kwargs)\n",
    "        \n",
    "        # MODEL PREDICT\n",
    "        p_train = model.predict_proba(X_train)[:,1]\n",
    "        ypred_train = (p_train > 0.5).astype(int)\n",
    "\n",
    "        p_vld = model.predict_proba(X_vld)[:,1]\n",
    "        ypred_vld = (p_vld > 0.5).astype(int)\n",
    "        \n",
    "        p_alltrain[vld_idx] = p_vld # Save proba from validation fold\n",
    "        \n",
    "        # Appending to list\n",
    "        list_y_train.append(y_train)\n",
    "        list_ypred_train.append(ypred_train)\n",
    "        list_y_vld.append(y_vld)\n",
    "        list_ypred_vld.append(ypred_vld)\n",
    "        \n",
    "        print(\"Train set:\")\n",
    "        print(confusion_matrix(y_train, ypred_train))\n",
    "        print(\"Accuracy = {:.3f}, F1 = {:.3f}\".format(\n",
    "            accuracy_score(y_train, ypred_train)*100,\n",
    "            f1_score(y_train, ypred_train)*100))\n",
    "\n",
    "        print(\"Validation set:\")\n",
    "        print(confusion_matrix(y_vld, ypred_vld))\n",
    "        print(\"Accuracy = {:.3f}, F1 = {:.3f}\".format(\n",
    "            accuracy_score(y_vld, ypred_vld)*100,\n",
    "            f1_score(y_vld, ypred_vld)*100))\n",
    "    \n",
    "        if best_threshold == True:\n",
    "            # Search for best threshold in current fold\n",
    "            threshold, acc = searchThreshold(p_vld, y_vld)\n",
    "            list_thresholds.append(threshold)\n",
    "            list_accs.append(acc)\n",
    "    \n",
    "    # k-fold cross validation results\n",
    "    cv_list = [list_y_train, list_ypred_train,\n",
    "               list_y_vld, list_ypred_vld]\n",
    "    pkl_obj = [cv_list, p_alltrain]\n",
    "        \n",
    "    if X_test is not None:\n",
    "        # Prediction of test set with model fitted on entire training set\n",
    "        # MODEL FIT: TEST\n",
    "        model.fit(X_alltrain, y_alltrain, **kwargs)\n",
    "        \n",
    "        # MODEL PREDICT: TEST\n",
    "        p_test = model.predict_proba(X_test)[:,1]\n",
    "        pkl_obj.append(p_test) # Return p_test\n",
    "        ypred_test = (p_test > 0.5).astype(int)\n",
    "        \n",
    "        if best_threshold == True:\n",
    "            mean_threshold = np.mean(list_thresholds)\n",
    "            ypred_threshold_test = (p_test > mean_threshold).astype(int)\n",
    "            # Prediction based on best threshold\n",
    "            print(\"\\nFinal threshold = {:.5f}\".format(mean_threshold))\n",
    "    \n",
    "        # SAVE FILE\n",
    "        if submission_filename is not None:\n",
    "            print(\"Predictions:\")\n",
    "            saveResult(ypred_test, submission_filename)\n",
    "            \n",
    "            if best_threshold == True:\n",
    "                # Save predictions with best threshold\n",
    "                submission_threshold_filename = submission_filename + '.csv'\n",
    "                saveResult(ypred_threshold_test,\n",
    "                           submission_threshold_filename)\n",
    "\n",
    "    if cv_filename is not None:\n",
    "        # Pickles cross validation predictions\n",
    "        cv_path = os.path.join(\"dump/log/\", cv_filename)\n",
    "        print(\"Saving CV predictions to: {}\\n\".format(cv_path))\n",
    "        with open(cv_path, \"wb\") as f:\n",
    "            pkl.dump(cv_list, f)\n",
    "    \n",
    "    return pkl_obj # [cv_list, p_alltrain, p_test]\n",
    "\n",
    "def printCVResults(filename):\n",
    "    cv_path = os.path.join(\"dump/log/\", filename)\n",
    "    with open(cv_path, \"rb\") as f:\n",
    "        list_list = pkl.load(f)\n",
    "        # [list_y_train, list_ypred_train\n",
    "        # list_y_vld, list_ypred_vld]\n",
    "\n",
    "    train_acc = []\n",
    "    vld_acc = []\n",
    "    train_f1 = []\n",
    "    vld_f1 = []\n",
    "    for y_train, ypred_train, y_vld, ypred_vld in zip(*list_list):\n",
    "        print(\"Train set:\")\n",
    "        print(confusion_matrix(y_train, ypred_train))\n",
    "        print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "            accuracy_score(y_train, ypred_train),\n",
    "            f1_score(y_train, ypred_train)))\n",
    "\n",
    "        print(\"Validation set:\")\n",
    "        print(confusion_matrix(y_vld, ypred_vld))\n",
    "        print(\"Accuracy = {:.5f}, F1 = {:.5f}\\n\".format(\n",
    "            accuracy_score(y_vld, ypred_vld),\n",
    "            f1_score(y_vld, ypred_vld)))    \n",
    "\n",
    "        train_acc.append(accuracy_score(y_train, ypred_train))\n",
    "        vld_acc.append(accuracy_score(y_vld, ypred_vld))\n",
    "        train_f1.append(f1_score(y_train, ypred_train))\n",
    "        vld_f1.append(f1_score(y_vld, ypred_vld))\n",
    "\n",
    "    mean_train_acc = np.mean(train_acc)\n",
    "    std_train_acc = np.std(train_acc)\n",
    "    mean_vld_acc = np.mean(vld_acc)\n",
    "    std_vld_acc = np.std(vld_acc)\n",
    "    \n",
    "    mean_train_f1 = np.mean(train_f1)\n",
    "    std_train_f1 = np.std(train_f1)\n",
    "    mean_vld_f1 = np.mean(vld_f1)\n",
    "    std_vld_f1 = np.std(vld_f1)\n",
    "    \n",
    "    print(cv_path)\n",
    "    print(\"Training accuracy: {:.2f} +/- {:.2f}%\".format(\n",
    "        mean_train_acc*100, std_train_acc*100))\n",
    "    print(\"Validation accuracy: {:.2f} +/- {:.2f}%\".format(\n",
    "        mean_vld_acc*100, std_vld_acc*100))\n",
    "    print(\"Training F1: {:.4f} +/- {:.4f}%\".format(\n",
    "        mean_train_f1, std_train_f1))\n",
    "    print(\"Validation F1: {:.4f} +/- {:.4f}%\\n\".format(\n",
    "        mean_vld_f1, std_vld_f1))\n",
    "\n",
    "def searchThreshold(p, y):\n",
    "    # Search for threshold that maximises accuracy\n",
    "    # No assumption of convexity in (f: threshold -> acc)\n",
    "    \n",
    "    p = pd.Series(p) # Explicit type conversion to pd.Series\n",
    "    p_subset = p[(0.3 < p) & (p < 0.7)].sort_values()\n",
    "    \n",
    "    def calcAcc(threshold):\n",
    "        # Nonlocals: p and y\n",
    "        ypred_threshold = (p > threshold).astype(int)\n",
    "        return accuracy_score(y, ypred_threshold)\n",
    "    \n",
    "    list_acc = [calcAcc(x) for x in p_subset]\n",
    "    \n",
    "    max_threshold = p_subset.iloc[np.argmax(list_acc)]\n",
    "    max_acc = np.max(list_acc)\n",
    "    \n",
    "    print(\"Best threshold: {:.4f} (Accuracy = {:.2f})\".format(\n",
    "        max_threshold, max_acc*100))\n",
    "    \n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(p_subset, list_acc)\n",
    "    ax.scatter(max_threshold, max_acc, c='orange')\n",
    "    ax.set_xlabel(\"Threshold\")\n",
    "    ax.set_ylabel(\"Accuracy\")\n",
    "    plt.show()\n",
    "\n",
    "    return max_threshold, max_acc\n",
    "\n",
    "def plotROC(p, y):    \n",
    "    fpr, tpr, threshold = roc_curve(y, p, drop_intermediate=True)\n",
    "    AUC = auc(fpr, tpr)\n",
    "    \n",
    "    max_threshold, max_accuracy = searchThreshold(p, y)\n",
    "    \n",
    "    # Plot ROC curve\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(6,6))\n",
    "    lab = \"ROC (AUC: {:.3f})\".format(AUC)\n",
    "    ax.plot(fpr, tpr, label=lab)\n",
    "    ax.scatter(fpr[threshold == max_threshold],\n",
    "               tpr[threshold == max_threshold])\n",
    "    ax.set_xlabel(\"FPR\")\n",
    "    ax.set_ylabel(\"TPR\")\n",
    "    ax.legend(loc=\"lower right\")\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    return fig\n",
    "\n",
    "def saveResult(ypred_test, filename):\n",
    "    '''Saves predicted labels to csv file'''\n",
    "    # Size of test set is 24421\n",
    "    assert ypred_test.size == 24421\n",
    "    results_dict = {\n",
    "        \"id\": np.arange(1, ypred_test.size + 1),\n",
    "        \"prediction\": ypred_test\n",
    "    }\n",
    "    results = pd.DataFrame(results_dict)\n",
    "    \n",
    "    path = os.path.join(\"dump/submissions/\", filename)\n",
    "    print(\"Saved submission file to:\", path)\n",
    "    results.to_csv(path, index=False)   \n",
    "\n",
    "def saveL1Test(model, X_alltrain, y_alltrain, X_test, filename):\n",
    "    model.fit(X_alltrain, y_alltrain)\n",
    "    ypred_test = model.predict(X_test)\n",
    "    saveResult(ypred_test, filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24421, 10)\n",
      "(24421, 10)\n"
     ]
    }
   ],
   "source": [
    "## Import L1 features\n",
    "L1_WPATH1 = \"dump/data/pca2.pkl\"\n",
    "with open(L1_WPATH1, \"rb\") as f:\n",
    "    pca_alltrain, y_alltrain, pca_test = pkl.load(f)\n",
    "print(pca_alltrain.shape)\n",
    "print(pca_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import model probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['allcat_catnb', 'nopp_et1', 'nopp_et2', 'nopp_lgbm1', 'nopp_lgbm2', 'nopp_rf1', 'nopp_rf2', 'nopp_xgb1', 'nopp_xgb2', 'pca1_svm1', 'pca1_svm2', 'pca2_mlp', 'raw1_catboost3', 'raw1_catboost4', 'wxpp1c_knn']\n",
      "(24421, 15)\n",
      "(24421, 15)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>allcat_catnb</th>\n",
       "      <th>nopp_et1</th>\n",
       "      <th>nopp_et2</th>\n",
       "      <th>nopp_lgbm1</th>\n",
       "      <th>nopp_lgbm2</th>\n",
       "      <th>nopp_rf1</th>\n",
       "      <th>nopp_rf2</th>\n",
       "      <th>nopp_xgb1</th>\n",
       "      <th>nopp_xgb2</th>\n",
       "      <th>pca1_svm1</th>\n",
       "      <th>pca1_svm2</th>\n",
       "      <th>pca2_mlp</th>\n",
       "      <th>raw1_catboost3</th>\n",
       "      <th>raw1_catboost4</th>\n",
       "      <th>wxpp1c_knn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.003490</td>\n",
       "      <td>0.011138</td>\n",
       "      <td>0.007373</td>\n",
       "      <td>0.012520</td>\n",
       "      <td>0.004021</td>\n",
       "      <td>0.019573</td>\n",
       "      <td>0.006871</td>\n",
       "      <td>0.009343</td>\n",
       "      <td>0.078474</td>\n",
       "      <td>0.034886</td>\n",
       "      <td>0.002066</td>\n",
       "      <td>0.001551</td>\n",
       "      <td>0.003613</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.140076</td>\n",
       "      <td>0.190204</td>\n",
       "      <td>0.388747</td>\n",
       "      <td>0.222139</td>\n",
       "      <td>0.414929</td>\n",
       "      <td>0.196942</td>\n",
       "      <td>0.339165</td>\n",
       "      <td>0.187417</td>\n",
       "      <td>0.265594</td>\n",
       "      <td>0.097510</td>\n",
       "      <td>0.032696</td>\n",
       "      <td>0.074069</td>\n",
       "      <td>0.195918</td>\n",
       "      <td>0.286531</td>\n",
       "      <td>0.190476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.076471</td>\n",
       "      <td>0.235879</td>\n",
       "      <td>0.471053</td>\n",
       "      <td>0.185988</td>\n",
       "      <td>0.383326</td>\n",
       "      <td>0.195644</td>\n",
       "      <td>0.302336</td>\n",
       "      <td>0.202298</td>\n",
       "      <td>0.293016</td>\n",
       "      <td>0.085101</td>\n",
       "      <td>0.070599</td>\n",
       "      <td>0.138156</td>\n",
       "      <td>0.214006</td>\n",
       "      <td>0.298474</td>\n",
       "      <td>0.238095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.949461</td>\n",
       "      <td>0.685143</td>\n",
       "      <td>0.876671</td>\n",
       "      <td>0.715717</td>\n",
       "      <td>0.865494</td>\n",
       "      <td>0.731873</td>\n",
       "      <td>0.899054</td>\n",
       "      <td>0.661633</td>\n",
       "      <td>0.745233</td>\n",
       "      <td>0.765356</td>\n",
       "      <td>0.598961</td>\n",
       "      <td>0.660393</td>\n",
       "      <td>0.641380</td>\n",
       "      <td>0.749714</td>\n",
       "      <td>0.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.989046</td>\n",
       "      <td>0.645199</td>\n",
       "      <td>0.832020</td>\n",
       "      <td>0.842712</td>\n",
       "      <td>0.991549</td>\n",
       "      <td>0.872873</td>\n",
       "      <td>0.947814</td>\n",
       "      <td>0.819060</td>\n",
       "      <td>0.856521</td>\n",
       "      <td>0.789121</td>\n",
       "      <td>0.737510</td>\n",
       "      <td>0.902369</td>\n",
       "      <td>0.985751</td>\n",
       "      <td>0.990567</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   allcat_catnb  nopp_et1  nopp_et2  nopp_lgbm1  nopp_lgbm2  nopp_rf1  \\\n",
       "0      0.000008  0.003490  0.011138    0.007373    0.012520  0.004021   \n",
       "1      0.140076  0.190204  0.388747    0.222139    0.414929  0.196942   \n",
       "2      0.076471  0.235879  0.471053    0.185988    0.383326  0.195644   \n",
       "3      0.949461  0.685143  0.876671    0.715717    0.865494  0.731873   \n",
       "4      0.989046  0.645199  0.832020    0.842712    0.991549  0.872873   \n",
       "\n",
       "   nopp_rf2  nopp_xgb1  nopp_xgb2  pca1_svm1  pca1_svm2  pca2_mlp  \\\n",
       "0  0.019573   0.006871   0.009343   0.078474   0.034886  0.002066   \n",
       "1  0.339165   0.187417   0.265594   0.097510   0.032696  0.074069   \n",
       "2  0.302336   0.202298   0.293016   0.085101   0.070599  0.138156   \n",
       "3  0.899054   0.661633   0.745233   0.765356   0.598961  0.660393   \n",
       "4  0.947814   0.819060   0.856521   0.789121   0.737510  0.902369   \n",
       "\n",
       "   raw1_catboost3  raw1_catboost4  wxpp1c_knn  \n",
       "0        0.001551        0.003613    0.000000  \n",
       "1        0.195918        0.286531    0.190476  \n",
       "2        0.214006        0.298474    0.238095  \n",
       "3        0.641380        0.749714    0.619048  \n",
       "4        0.985751        0.990567    1.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RDIR = \"dump/proba/stack2/*\"\n",
    "list_files = glob.glob(RDIR)\n",
    "list_files.sort()\n",
    "\n",
    "model_names = [re.search(\".*/(.*).pkl\", rpath).group(1)\n",
    "               for rpath in list_files]\n",
    "print(model_names)\n",
    "allp_alltrain = pd.DataFrame(columns=model_names)\n",
    "allp_test = pd.DataFrame(columns=model_names)\n",
    "\n",
    "# Concatenate all probabilities to form dataframe\n",
    "for rpath, name in zip(list_files, model_names):\n",
    "    with open(rpath, \"rb\") as f:\n",
    "        p_alltrain, p_test = pkl.load(f)\n",
    "    allp_alltrain[name] = p_alltrain\n",
    "    allp_test[name] = p_test\n",
    "    \n",
    "print(allp_alltrain.shape)\n",
    "print(allp_test.shape)\n",
    "allp_alltrain.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Concatenate features and model outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24421, 25)\n",
      "(24421, 25)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>allcat_catnb</th>\n",
       "      <th>nopp_et1</th>\n",
       "      <th>nopp_et2</th>\n",
       "      <th>nopp_lgbm1</th>\n",
       "      <th>nopp_lgbm2</th>\n",
       "      <th>nopp_rf1</th>\n",
       "      <th>nopp_rf2</th>\n",
       "      <th>nopp_xgb1</th>\n",
       "      <th>nopp_xgb2</th>\n",
       "      <th>pca1_svm1</th>\n",
       "      <th>...</th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.003490</td>\n",
       "      <td>0.011138</td>\n",
       "      <td>0.007373</td>\n",
       "      <td>0.012520</td>\n",
       "      <td>0.004021</td>\n",
       "      <td>0.019573</td>\n",
       "      <td>0.006871</td>\n",
       "      <td>0.009343</td>\n",
       "      <td>0.078474</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.521918</td>\n",
       "      <td>0.515021</td>\n",
       "      <td>0.482417</td>\n",
       "      <td>-0.238125</td>\n",
       "      <td>0.154951</td>\n",
       "      <td>-0.303196</td>\n",
       "      <td>-0.106651</td>\n",
       "      <td>0.833078</td>\n",
       "      <td>0.035520</td>\n",
       "      <td>-0.007958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.140076</td>\n",
       "      <td>0.190204</td>\n",
       "      <td>0.388747</td>\n",
       "      <td>0.222139</td>\n",
       "      <td>0.414929</td>\n",
       "      <td>0.196942</td>\n",
       "      <td>0.339165</td>\n",
       "      <td>0.187417</td>\n",
       "      <td>0.265594</td>\n",
       "      <td>0.097510</td>\n",
       "      <td>...</td>\n",
       "      <td>0.888643</td>\n",
       "      <td>0.076789</td>\n",
       "      <td>0.569358</td>\n",
       "      <td>-1.604776</td>\n",
       "      <td>1.533522</td>\n",
       "      <td>0.208667</td>\n",
       "      <td>-0.459021</td>\n",
       "      <td>-0.332034</td>\n",
       "      <td>0.002269</td>\n",
       "      <td>-0.536081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.076471</td>\n",
       "      <td>0.235879</td>\n",
       "      <td>0.471053</td>\n",
       "      <td>0.185988</td>\n",
       "      <td>0.383326</td>\n",
       "      <td>0.195644</td>\n",
       "      <td>0.302336</td>\n",
       "      <td>0.202298</td>\n",
       "      <td>0.293016</td>\n",
       "      <td>0.085101</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.274286</td>\n",
       "      <td>-1.299425</td>\n",
       "      <td>1.505826</td>\n",
       "      <td>-1.109409</td>\n",
       "      <td>-1.487550</td>\n",
       "      <td>0.101955</td>\n",
       "      <td>-0.394293</td>\n",
       "      <td>-0.034860</td>\n",
       "      <td>-0.049405</td>\n",
       "      <td>0.036928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.949461</td>\n",
       "      <td>0.685143</td>\n",
       "      <td>0.876671</td>\n",
       "      <td>0.715717</td>\n",
       "      <td>0.865494</td>\n",
       "      <td>0.731873</td>\n",
       "      <td>0.899054</td>\n",
       "      <td>0.661633</td>\n",
       "      <td>0.745233</td>\n",
       "      <td>0.765356</td>\n",
       "      <td>...</td>\n",
       "      <td>1.527615</td>\n",
       "      <td>0.722383</td>\n",
       "      <td>-1.279674</td>\n",
       "      <td>0.004781</td>\n",
       "      <td>-0.320590</td>\n",
       "      <td>-0.304835</td>\n",
       "      <td>-0.515233</td>\n",
       "      <td>0.180571</td>\n",
       "      <td>0.036251</td>\n",
       "      <td>0.048684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.989046</td>\n",
       "      <td>0.645199</td>\n",
       "      <td>0.832020</td>\n",
       "      <td>0.842712</td>\n",
       "      <td>0.991549</td>\n",
       "      <td>0.872873</td>\n",
       "      <td>0.947814</td>\n",
       "      <td>0.819060</td>\n",
       "      <td>0.856521</td>\n",
       "      <td>0.789121</td>\n",
       "      <td>...</td>\n",
       "      <td>1.913859</td>\n",
       "      <td>-0.937786</td>\n",
       "      <td>0.555680</td>\n",
       "      <td>0.247162</td>\n",
       "      <td>-0.007851</td>\n",
       "      <td>0.098585</td>\n",
       "      <td>-0.485221</td>\n",
       "      <td>0.558210</td>\n",
       "      <td>-0.016272</td>\n",
       "      <td>0.012746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24416</th>\n",
       "      <td>0.986207</td>\n",
       "      <td>0.852883</td>\n",
       "      <td>0.951167</td>\n",
       "      <td>0.867283</td>\n",
       "      <td>0.930814</td>\n",
       "      <td>0.881052</td>\n",
       "      <td>0.950036</td>\n",
       "      <td>0.854145</td>\n",
       "      <td>0.882703</td>\n",
       "      <td>0.922156</td>\n",
       "      <td>...</td>\n",
       "      <td>1.384256</td>\n",
       "      <td>0.510367</td>\n",
       "      <td>-0.378726</td>\n",
       "      <td>-0.899359</td>\n",
       "      <td>-0.718224</td>\n",
       "      <td>-0.144630</td>\n",
       "      <td>-0.533314</td>\n",
       "      <td>0.082842</td>\n",
       "      <td>0.068354</td>\n",
       "      <td>0.727150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24417</th>\n",
       "      <td>0.009981</td>\n",
       "      <td>0.034514</td>\n",
       "      <td>0.096276</td>\n",
       "      <td>0.049510</td>\n",
       "      <td>0.069794</td>\n",
       "      <td>0.034271</td>\n",
       "      <td>0.057414</td>\n",
       "      <td>0.044856</td>\n",
       "      <td>0.061847</td>\n",
       "      <td>0.076894</td>\n",
       "      <td>...</td>\n",
       "      <td>0.044426</td>\n",
       "      <td>-0.478199</td>\n",
       "      <td>0.485126</td>\n",
       "      <td>-0.620217</td>\n",
       "      <td>1.292300</td>\n",
       "      <td>0.056728</td>\n",
       "      <td>-0.438125</td>\n",
       "      <td>0.040354</td>\n",
       "      <td>-0.461307</td>\n",
       "      <td>0.098383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24418</th>\n",
       "      <td>0.007300</td>\n",
       "      <td>0.059196</td>\n",
       "      <td>0.110198</td>\n",
       "      <td>0.013893</td>\n",
       "      <td>0.021448</td>\n",
       "      <td>0.045098</td>\n",
       "      <td>0.104269</td>\n",
       "      <td>0.020460</td>\n",
       "      <td>0.027353</td>\n",
       "      <td>0.084321</td>\n",
       "      <td>...</td>\n",
       "      <td>0.183249</td>\n",
       "      <td>-0.205517</td>\n",
       "      <td>0.472835</td>\n",
       "      <td>-0.895704</td>\n",
       "      <td>1.300966</td>\n",
       "      <td>-0.632632</td>\n",
       "      <td>0.668658</td>\n",
       "      <td>-0.303534</td>\n",
       "      <td>0.875585</td>\n",
       "      <td>-0.097245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24419</th>\n",
       "      <td>0.000034</td>\n",
       "      <td>0.006844</td>\n",
       "      <td>0.012321</td>\n",
       "      <td>0.003591</td>\n",
       "      <td>0.010897</td>\n",
       "      <td>0.009506</td>\n",
       "      <td>0.013002</td>\n",
       "      <td>0.005667</td>\n",
       "      <td>0.006046</td>\n",
       "      <td>0.060084</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.153058</td>\n",
       "      <td>0.707110</td>\n",
       "      <td>-0.203365</td>\n",
       "      <td>0.252643</td>\n",
       "      <td>0.393552</td>\n",
       "      <td>-0.390754</td>\n",
       "      <td>-0.143670</td>\n",
       "      <td>0.102260</td>\n",
       "      <td>-0.182837</td>\n",
       "      <td>-0.384056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24420</th>\n",
       "      <td>0.965296</td>\n",
       "      <td>0.691083</td>\n",
       "      <td>0.875666</td>\n",
       "      <td>0.717009</td>\n",
       "      <td>0.898717</td>\n",
       "      <td>0.726541</td>\n",
       "      <td>0.894879</td>\n",
       "      <td>0.754394</td>\n",
       "      <td>0.818614</td>\n",
       "      <td>0.824597</td>\n",
       "      <td>...</td>\n",
       "      <td>1.640110</td>\n",
       "      <td>-0.273003</td>\n",
       "      <td>0.185867</td>\n",
       "      <td>-1.278032</td>\n",
       "      <td>-0.562588</td>\n",
       "      <td>0.104038</td>\n",
       "      <td>0.541627</td>\n",
       "      <td>0.162363</td>\n",
       "      <td>-0.084573</td>\n",
       "      <td>-0.480690</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24421 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       allcat_catnb  nopp_et1  nopp_et2  nopp_lgbm1  nopp_lgbm2  nopp_rf1  \\\n",
       "0          0.000008  0.003490  0.011138    0.007373    0.012520  0.004021   \n",
       "1          0.140076  0.190204  0.388747    0.222139    0.414929  0.196942   \n",
       "2          0.076471  0.235879  0.471053    0.185988    0.383326  0.195644   \n",
       "3          0.949461  0.685143  0.876671    0.715717    0.865494  0.731873   \n",
       "4          0.989046  0.645199  0.832020    0.842712    0.991549  0.872873   \n",
       "...             ...       ...       ...         ...         ...       ...   \n",
       "24416      0.986207  0.852883  0.951167    0.867283    0.930814  0.881052   \n",
       "24417      0.009981  0.034514  0.096276    0.049510    0.069794  0.034271   \n",
       "24418      0.007300  0.059196  0.110198    0.013893    0.021448  0.045098   \n",
       "24419      0.000034  0.006844  0.012321    0.003591    0.010897  0.009506   \n",
       "24420      0.965296  0.691083  0.875666    0.717009    0.898717  0.726541   \n",
       "\n",
       "       nopp_rf2  nopp_xgb1  nopp_xgb2  pca1_svm1  ...       PC1       PC2  \\\n",
       "0      0.019573   0.006871   0.009343   0.078474  ... -1.521918  0.515021   \n",
       "1      0.339165   0.187417   0.265594   0.097510  ...  0.888643  0.076789   \n",
       "2      0.302336   0.202298   0.293016   0.085101  ... -0.274286 -1.299425   \n",
       "3      0.899054   0.661633   0.745233   0.765356  ...  1.527615  0.722383   \n",
       "4      0.947814   0.819060   0.856521   0.789121  ...  1.913859 -0.937786   \n",
       "...         ...        ...        ...        ...  ...       ...       ...   \n",
       "24416  0.950036   0.854145   0.882703   0.922156  ...  1.384256  0.510367   \n",
       "24417  0.057414   0.044856   0.061847   0.076894  ...  0.044426 -0.478199   \n",
       "24418  0.104269   0.020460   0.027353   0.084321  ...  0.183249 -0.205517   \n",
       "24419  0.013002   0.005667   0.006046   0.060084  ... -1.153058  0.707110   \n",
       "24420  0.894879   0.754394   0.818614   0.824597  ...  1.640110 -0.273003   \n",
       "\n",
       "            PC3       PC4       PC5       PC6       PC7       PC8       PC9  \\\n",
       "0      0.482417 -0.238125  0.154951 -0.303196 -0.106651  0.833078  0.035520   \n",
       "1      0.569358 -1.604776  1.533522  0.208667 -0.459021 -0.332034  0.002269   \n",
       "2      1.505826 -1.109409 -1.487550  0.101955 -0.394293 -0.034860 -0.049405   \n",
       "3     -1.279674  0.004781 -0.320590 -0.304835 -0.515233  0.180571  0.036251   \n",
       "4      0.555680  0.247162 -0.007851  0.098585 -0.485221  0.558210 -0.016272   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "24416 -0.378726 -0.899359 -0.718224 -0.144630 -0.533314  0.082842  0.068354   \n",
       "24417  0.485126 -0.620217  1.292300  0.056728 -0.438125  0.040354 -0.461307   \n",
       "24418  0.472835 -0.895704  1.300966 -0.632632  0.668658 -0.303534  0.875585   \n",
       "24419 -0.203365  0.252643  0.393552 -0.390754 -0.143670  0.102260 -0.182837   \n",
       "24420  0.185867 -1.278032 -0.562588  0.104038  0.541627  0.162363 -0.084573   \n",
       "\n",
       "           PC10  \n",
       "0     -0.007958  \n",
       "1     -0.536081  \n",
       "2      0.036928  \n",
       "3      0.048684  \n",
       "4      0.012746  \n",
       "...         ...  \n",
       "24416  0.727150  \n",
       "24417  0.098383  \n",
       "24418 -0.097245  \n",
       "24419 -0.384056  \n",
       "24420 -0.480690  \n",
       "\n",
       "[24421 rows x 25 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pc_idx = ['PC' + str(x) for x in list(range(1,11))]\n",
    "## Concatenate model outputs and data features\n",
    "X_alltrain = pd.DataFrame(np.hstack([allp_alltrain, pca_alltrain]),\n",
    "                          columns=list(allp_alltrain) + pc_idx)\n",
    "X_test = pd.DataFrame(np.hstack([allp_test, pca_test]),\n",
    "                      columns=list(allp_alltrain) + pc_idx)\n",
    "print(X_alltrain.shape)\n",
    "print(X_test.shape)\n",
    "X_alltrain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation: Individual models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set:\n",
      "allcat_catnb\n",
      "Accuracy = 0.8185, F1 = 0.6753\n",
      "nopp_et1\n",
      "Accuracy = 0.8500, F1 = 0.6480\n",
      "nopp_et2\n",
      "Accuracy = 0.8059, F1 = 0.6747\n",
      "nopp_lgbm1\n",
      "Accuracy = 0.8721, F1 = 0.7122\n",
      "nopp_lgbm2\n",
      "Accuracy = 0.8363, F1 = 0.7159\n",
      "nopp_rf1\n",
      "Accuracy = 0.8637, F1 = 0.6815\n",
      "nopp_rf2\n",
      "Accuracy = 0.8367, F1 = 0.7063\n",
      "nopp_xgb1\n",
      "Accuracy = 0.8723, F1 = 0.7070\n",
      "nopp_xgb2\n",
      "Accuracy = 0.8700, F1 = 0.7297\n",
      "pca1_svm1\n",
      "Accuracy = 0.8517, F1 = 0.6400\n",
      "pca1_svm2\n",
      "Accuracy = 0.8422, F1 = 0.6921\n",
      "pca2_mlp\n",
      "Accuracy = 0.8530, F1 = 0.6637\n",
      "raw1_catboost3\n",
      "Accuracy = 0.8745, F1 = 0.7144\n",
      "raw1_catboost4\n",
      "Accuracy = 0.8614, F1 = 0.7314\n",
      "wxpp1c_knn\n",
      "Accuracy = 0.8524, F1 = 0.6609\n"
     ]
    }
   ],
   "source": [
    "allypred_alltrain = getPredictions(allp_alltrain)\n",
    "\n",
    "print(\"Training set:\")\n",
    "for colname, ypred_alltrain in allypred_alltrain.iteritems():\n",
    "    print(colname)\n",
    "    print(\"Accuracy = {:.4f}, F1 = {:.4f}\".format(\n",
    "        accuracy_score(y_alltrain, ypred_alltrain),\n",
    "        f1_score(y_alltrain, ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation: Correlation between model predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr_alltrain = allp_alltrain.corr(method='pearson')\n",
    "corr_test = allp_test.corr(method='pearson')\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,6))\n",
    "sns.heatmap(corr_alltrain, square=True, annot=True, ax=ax1)\n",
    "sns.heatmap(corr_test, square=True, annot=True, ax=ax2)\n",
    "ax1.set_title(\"Training set\")\n",
    "ax2.set_title(\"Test set\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation: Wrongly classified samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "allypred_alltrain = getPredictions(allp_alltrain)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Samples classified incorrectly by all models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "443\n",
      "519\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Int64Index([   45,    54,    81,    99,   138,   139,   166,   168,   276,\n",
       "              300,\n",
       "            ...\n",
       "            24057, 24119, 24134, 24173, 24244, 24268, 24276, 24303, 24339,\n",
       "            24353],\n",
       "           dtype='int64', length=519)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ## Not a single one of the model gets it correct\n",
    "# ypred_prod = allypred_alltrain.apply(np.prod, axis=1)\n",
    "# ypred_sum = allypred_alltrain.apply(np.sum, axis=1)\n",
    "\n",
    "##\n",
    "allwrong_0 = allypred_alltrain.loc[(ypred_prod == 1) & (y_alltrain == 0),:]\n",
    "allwrong_1 = allypred_alltrain.loc[(ypred_sum == 0) & (y_alltrain == 1),:]\n",
    "print(allwrong_0.shape[0])\n",
    "print(allwrong_1.shape[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(24421, 11)\n",
      "(24421, 11)\n"
     ]
    }
   ],
   "source": [
    "## Import L1 features\n",
    "L1_WPATH1 = \"dump/data/raw1.pkl\"\n",
    "with open(L1_WPATH1, \"rb\") as f:\n",
    "    raw1_alltrain, y_alltrain, raw1_test = pkl.load(f)\n",
    "print(raw1_alltrain.shape)\n",
    "print(raw1_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>education-num</th>\n",
       "      <th>hours-per-week</th>\n",
       "      <th>net_capital_gain</th>\n",
       "      <th>workclass</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>marital-status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>sex</th>\n",
       "      <th>native-country</th>\n",
       "      <th>exceeds50K</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>59</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>142182</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Other-service</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>360884</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>34</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>73585</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>Others</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>38</td>\n",
       "      <td>13</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>95336</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Craft-repair</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>40</td>\n",
       "      <td>11</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>191982</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Unmarried</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>32</td>\n",
       "      <td>9</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>174201</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>45</td>\n",
       "      <td>13</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>83064</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>31</td>\n",
       "      <td>13</td>\n",
       "      <td>65</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>104509</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>25</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>185942</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>64</td>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>391121</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Farming-fishing</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>106562</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>67</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>-2457</td>\n",
       "      <td>Private</td>\n",
       "      <td>227113</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>276</th>\n",
       "      <td>46</td>\n",
       "      <td>13</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>195416</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>61</td>\n",
       "      <td>10</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>48549</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>46</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Federal-gov</td>\n",
       "      <td>330901</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>41</td>\n",
       "      <td>6</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>197583</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Transport-moving</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353</th>\n",
       "      <td>42</td>\n",
       "      <td>13</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>138162</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>367</th>\n",
       "      <td>76</td>\n",
       "      <td>10</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>Others</td>\n",
       "      <td>172637</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Others</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>368</th>\n",
       "      <td>45</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>4386</td>\n",
       "      <td>Private</td>\n",
       "      <td>120724</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>376</th>\n",
       "      <td>35</td>\n",
       "      <td>13</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>186819</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>377</th>\n",
       "      <td>24</td>\n",
       "      <td>10</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>461678</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Farming-fishing</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389</th>\n",
       "      <td>59</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>136413</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>45</td>\n",
       "      <td>13</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>199058</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>Others</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>425</th>\n",
       "      <td>47</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>287547</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469</th>\n",
       "      <td>26</td>\n",
       "      <td>13</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>176729</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Craft-repair</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514</th>\n",
       "      <td>42</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>156580</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Female</td>\n",
       "      <td>Puerto-Rico</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>534</th>\n",
       "      <td>59</td>\n",
       "      <td>6</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>97168</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Craft-repair</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>43</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Local-gov</td>\n",
       "      <td>193755</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>541</th>\n",
       "      <td>34</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>312055</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>573</th>\n",
       "      <td>46</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>123598</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>587</th>\n",
       "      <td>52</td>\n",
       "      <td>10</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>180062</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>588</th>\n",
       "      <td>42</td>\n",
       "      <td>9</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>344572</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>39</td>\n",
       "      <td>14</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>25806</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>China</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>34</td>\n",
       "      <td>14</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>173730</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>632</th>\n",
       "      <td>48</td>\n",
       "      <td>13</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>Local-gov</td>\n",
       "      <td>169515</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Protective-serv</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>743</th>\n",
       "      <td>28</td>\n",
       "      <td>13</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>193260</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Male</td>\n",
       "      <td>South</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>831</th>\n",
       "      <td>48</td>\n",
       "      <td>13</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>193775</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>835</th>\n",
       "      <td>40</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>199303</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>850</th>\n",
       "      <td>52</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>168001</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>34</td>\n",
       "      <td>10</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>Local-gov</td>\n",
       "      <td>33731</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Transport-moving</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>48</td>\n",
       "      <td>13</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>94342</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Craft-repair</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>49</td>\n",
       "      <td>13</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>78529</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>897</th>\n",
       "      <td>60</td>\n",
       "      <td>10</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>202226</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Craft-repair</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916</th>\n",
       "      <td>38</td>\n",
       "      <td>12</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>193815</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>Italy</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>37</td>\n",
       "      <td>10</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Self-emp-inc</td>\n",
       "      <td>199265</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>62</td>\n",
       "      <td>13</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>39630</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1095</th>\n",
       "      <td>38</td>\n",
       "      <td>13</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>112497</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Protective-serv</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>51</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>124963</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Sales</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1150</th>\n",
       "      <td>40</td>\n",
       "      <td>10</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>Private</td>\n",
       "      <td>34722</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Transport-moving</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  education-num  hours-per-week  net_capital_gain         workclass  \\\n",
       "45     59              9              40                 0           Private   \n",
       "54     40             10              50                 0           Private   \n",
       "69     34             14              40                 0           Private   \n",
       "71     38             13              45                 0           Private   \n",
       "81     40             11              40                 0           Private   \n",
       "99     32              9              38                 0           Private   \n",
       "119    45             13              50                 0           Private   \n",
       "138    31             13              65                 0           Private   \n",
       "139    25             14              40                 0           Private   \n",
       "166    64              4              40                 0           Private   \n",
       "168    27             13              50                 0           Private   \n",
       "244    67             14              40             -2457           Private   \n",
       "276    46             13              44                 0           Private   \n",
       "300    61             10              38                 0           Private   \n",
       "315    46             10              40                 0       Federal-gov   \n",
       "325    41              6              40                 0           Private   \n",
       "353    42             13              45                 0  Self-emp-not-inc   \n",
       "367    76             10              20                 0            Others   \n",
       "368    45             14              40              4386           Private   \n",
       "376    35             13              48                 0           Private   \n",
       "377    24             10              50                 0           Private   \n",
       "389    59             13              40                 0           Private   \n",
       "417    45             13              48                 0           Private   \n",
       "425    47             13              40                 0         State-gov   \n",
       "469    26             13              45                 0           Private   \n",
       "514    42             13              40                 0           Private   \n",
       "534    59              6              40                 0           Private   \n",
       "536    43             13              40                 0         Local-gov   \n",
       "541    34             13              40                 0           Private   \n",
       "573    46             13              40                 0           Private   \n",
       "587    52             10              60                 0           Private   \n",
       "588    42              9              40                 0           Private   \n",
       "607    39             14              48                 0         State-gov   \n",
       "613    34             14              38                 0         State-gov   \n",
       "632    48             13              43                 0         Local-gov   \n",
       "743    28             13              50                 0           Private   \n",
       "831    48             13              38                 0           Private   \n",
       "835    40             13              40                 0  Self-emp-not-inc   \n",
       "850    52             14              40                 0           Private   \n",
       "860    34             10              40                 0         Local-gov   \n",
       "880    48             13              55                 0           Private   \n",
       "882    49             13              60                 0           Private   \n",
       "897    60             10              44                 0           Private   \n",
       "916    38             12              55                 0           Private   \n",
       "989    37             10              50                 0      Self-emp-inc   \n",
       "1016   62             13              40                 0         State-gov   \n",
       "1095   38             13              60                 0         State-gov   \n",
       "1139   51             12              50                 0           Private   \n",
       "1150   40             10              48                 0           Private   \n",
       "\n",
       "      fnlwgt      marital-status         occupation   relationship     sex  \\\n",
       "45    142182  Married-civ-spouse      Other-service        Husband    Male   \n",
       "54    360884       Never-married       Tech-support  Not-in-family  Female   \n",
       "69     73585  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "71     95336  Married-civ-spouse       Craft-repair        Husband    Male   \n",
       "81    191982            Divorced     Prof-specialty      Unmarried  Female   \n",
       "99    174201  Married-civ-spouse  Handlers-cleaners        Husband    Male   \n",
       "119    83064  Married-civ-spouse              Sales        Husband    Male   \n",
       "138   104509       Never-married              Sales  Not-in-family  Female   \n",
       "139   185942       Never-married     Prof-specialty      Own-child  Female   \n",
       "166   391121  Married-civ-spouse    Farming-fishing        Husband    Male   \n",
       "168   106562       Never-married     Prof-specialty  Not-in-family  Female   \n",
       "244   227113  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "276   195416       Never-married     Prof-specialty  Not-in-family  Female   \n",
       "300    48549       Never-married    Exec-managerial  Not-in-family    Male   \n",
       "315   330901  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "325   197583  Married-civ-spouse   Transport-moving        Husband    Male   \n",
       "353   138162  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "367   172637  Married-civ-spouse             Others        Husband    Male   \n",
       "368   120724  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "376   186819  Married-civ-spouse       Tech-support        Husband    Male   \n",
       "377   461678  Married-civ-spouse    Farming-fishing        Husband    Male   \n",
       "389   136413  Married-civ-spouse              Sales        Husband    Male   \n",
       "417   199058  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "425   287547  Married-civ-spouse     Prof-specialty           Wife  Female   \n",
       "469   176729       Never-married       Craft-repair  Not-in-family    Male   \n",
       "514   156580  Married-civ-spouse              Sales           Wife  Female   \n",
       "534    97168  Married-civ-spouse       Craft-repair        Husband    Male   \n",
       "536   193755  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "541   312055       Never-married    Exec-managerial  Not-in-family    Male   \n",
       "573   123598  Married-civ-spouse              Sales        Husband    Male   \n",
       "587   180062  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "588   344572            Divorced    Exec-managerial  Not-in-family  Female   \n",
       "607    25806  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "613   173730  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "632   169515            Divorced    Protective-serv  Not-in-family  Female   \n",
       "743   193260       Never-married     Prof-specialty  Not-in-family    Male   \n",
       "831   193775            Divorced       Adm-clerical      Own-child    Male   \n",
       "835   199303  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "850   168001            Divorced     Prof-specialty  Not-in-family  Female   \n",
       "860    33731  Married-civ-spouse   Transport-moving        Husband    Male   \n",
       "880    94342  Married-civ-spouse       Craft-repair        Husband    Male   \n",
       "882    78529  Married-civ-spouse              Sales        Husband    Male   \n",
       "897   202226            Divorced       Craft-repair      Own-child    Male   \n",
       "916   193815  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "989   199265  Married-civ-spouse    Exec-managerial        Husband    Male   \n",
       "1016   39630  Married-civ-spouse     Prof-specialty        Husband    Male   \n",
       "1095  112497  Married-civ-spouse    Protective-serv        Husband    Male   \n",
       "1139  124963  Married-civ-spouse              Sales        Husband    Male   \n",
       "1150   34722            Divorced   Transport-moving  Not-in-family    Male   \n",
       "\n",
       "     native-country  exceeds50K  \n",
       "45    United-States           1  \n",
       "54    United-States           1  \n",
       "69           Others           0  \n",
       "71    United-States           0  \n",
       "81    United-States           1  \n",
       "99    United-States           1  \n",
       "119   United-States           0  \n",
       "138   United-States           1  \n",
       "139   United-States           1  \n",
       "166   United-States           1  \n",
       "168   United-States           1  \n",
       "244   United-States           0  \n",
       "276   United-States           1  \n",
       "300   United-States           1  \n",
       "315   United-States           0  \n",
       "325   United-States           1  \n",
       "353   United-States           0  \n",
       "367   United-States           1  \n",
       "368   United-States           0  \n",
       "376   United-States           0  \n",
       "377   United-States           1  \n",
       "389   United-States           0  \n",
       "417          Others           0  \n",
       "425   United-States           0  \n",
       "469   United-States           1  \n",
       "514     Puerto-Rico           0  \n",
       "534   United-States           1  \n",
       "536   United-States           0  \n",
       "541   United-States           1  \n",
       "573   United-States           0  \n",
       "587   United-States           0  \n",
       "588   United-States           1  \n",
       "607           China           0  \n",
       "613   United-States           0  \n",
       "632   United-States           1  \n",
       "743           South           1  \n",
       "831   United-States           1  \n",
       "835   United-States           0  \n",
       "850   United-States           1  \n",
       "860   United-States           1  \n",
       "880   United-States           0  \n",
       "882   United-States           0  \n",
       "897   United-States           1  \n",
       "916           Italy           0  \n",
       "989   United-States           0  \n",
       "1016  United-States           0  \n",
       "1095  United-States           0  \n",
       "1139  United-States           0  \n",
       "1150  United-States           1  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "false_negatives = raw1_alltrain.loc[allwrong_1.index,:]\n",
    "false_positives = raw1_alltrain.loc[allwrong_0.index,:]\n",
    "false_combined = pd.concat([false_negatives, false_positives], axis=0)\n",
    "combined_idx = allwrong_1.index.union(allwrong_0.index)\n",
    "falseX_y = pd.concat([false_combined, y_alltrain[combined_idx]], axis=1)\n",
    "false_negatives.iloc[1:30,:]\n",
    "falseX_y.iloc[1:50,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pairwise averaging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[16521  2039]\n",
      " [ 1327  4534]]\n",
      "Accuracy = 0.86217, F1 = 0.72929\n"
     ]
    }
   ],
   "source": [
    "p_alltrain1 = allp_alltrain.nopp_lgbm1\n",
    "p_alltrain2 = allp_alltrain.nopp_lgbm2\n",
    "\n",
    "avg_lgbm = (p_alltrain1 + p_alltrain2)/2\n",
    "ypred_alltrain = (avg_lgbm > 0.5).astype(int)\n",
    "\n",
    "print(confusion_matrix(y_alltrain, ypred_alltrain))\n",
    "print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "    accuracy_score(y_alltrain, ypred_alltrain),\n",
    "    f1_score(y_alltrain, ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[16749  1811]\n",
      " [ 1618  4243]]\n",
      "Accuracy = 0.85959, F1 = 0.71221\n"
     ]
    }
   ],
   "source": [
    "p_alltrain1 = allp_alltrain.nopp_rf1\n",
    "p_alltrain2 = allp_alltrain.nopp_rf2\n",
    "\n",
    "avg_rf = (p_alltrain1 + p_alltrain2)/2\n",
    "ypred_alltrain = (avg_rf > 0.5).astype(int)\n",
    "\n",
    "print(confusion_matrix(y_alltrain, ypred_alltrain))\n",
    "print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "    accuracy_score(y_alltrain, ypred_alltrain),\n",
    "    f1_score(y_alltrain, ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacking: Hard voting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.92      0.91     18560\n",
      "           1       0.73      0.69      0.71      5861\n",
      "\n",
      "    accuracy                           0.86     24421\n",
      "   macro avg       0.82      0.81      0.81     24421\n",
      "weighted avg       0.86      0.86      0.86     24421\n",
      "\n",
      "[[17031  1529]\n",
      " [ 1793  4068]]\n",
      "Accuracy = 0.86397, F1 = 0.71007\n"
     ]
    }
   ],
   "source": [
    "allypred_alltrain = getPredictions(allp_alltrain)\n",
    "\n",
    "# Average the predicted labels\n",
    "voteL1_p_alltrain = allypred_alltrain.mean(axis=1)\n",
    "voteL1_ypred_alltrain = (voteL1_p_alltrain > 0.5).astype(int)\n",
    "\n",
    "print(\"Train set:\")\n",
    "print(classification_report(y_alltrain, voteL1_ypred_alltrain))\n",
    "print(confusion_matrix(y_alltrain, voteL1_ypred_alltrain))\n",
    "print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "    accuracy_score(y_alltrain, voteL1_ypred_alltrain),\n",
    "    f1_score(y_alltrain, voteL1_ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test set predictions\n",
    "allypred_test = getPredictions(allp_test)\n",
    "\n",
    "voteL1_p_test = allypred_test.mean(axis=1)\n",
    "voteL1_ypred_test = (voteL1_p_test > 0.5).astype(int)\n",
    "# saveResult(voteL1_ypred_test, \"stack1_vote.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacking: Soft averaging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.92      0.91     18560\n",
      "           1       0.73      0.71      0.72      5861\n",
      "\n",
      "    accuracy                           0.87     24421\n",
      "   macro avg       0.82      0.81      0.81     24421\n",
      "weighted avg       0.86      0.87      0.86     24421\n",
      "\n",
      "[[17003  1557]\n",
      " [ 1725  4136]]\n",
      "Accuracy = 0.86561, F1 = 0.71594\n"
     ]
    }
   ],
   "source": [
    "avgL1_p_alltrain = allp_alltrain.mean(axis=1)\n",
    "avgL1_ypred_alltrain = (avgL1_p_alltrain > 0.5).astype(int)\n",
    "\n",
    "print(\"Train set:\")\n",
    "print(classification_report(y_alltrain, avgL1_ypred_alltrain))\n",
    "print(confusion_matrix(y_alltrain, avgL1_ypred_alltrain))\n",
    "print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "    accuracy_score(y_alltrain, avgL1_ypred_alltrain),\n",
    "    f1_score(y_alltrain, avgL1_ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best threshold: 0.57854 (Acc = 87.425) accuracy\n",
      "(0.5785430353666662, 0.8742475738094263)\n"
     ]
    }
   ],
   "source": [
    "print(searchThreshold(avgL1_p_alltrain, y_alltrain))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved submission file to: dump/submissions/stack1_avg.csv\n"
     ]
    }
   ],
   "source": [
    "# Test set predictions\n",
    "avgL1_p_test = allp_test.mean(axis=1)\n",
    "avgL1_ypred_test = (avgL1_p_test > 0.5).astype(int)\n",
    "saveResult(avgL1_ypred_test, \"stack1_avg.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacking: Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set\n",
      "Accuracy = 87.257% +/- 0.075\n",
      "F1 = 72.346% +/- 0.179\n",
      "Test set\n",
      "Accuracy = 87.261% +/- 0.133\n",
      "F1 = 72.345% +/- 0.483\n"
     ]
    }
   ],
   "source": [
    "## MODEL 1\n",
    "params_logreg = {\n",
    "    \"C\": 1.0,\n",
    "    \"class_weight\": None,\n",
    "    \"solver\": \"lbfgs\"\n",
    "}\n",
    "logreg = LogisticRegression(**params_logreg)\n",
    "\n",
    "runL1Model(logreg, allp_alltrain, y_alltrain)\n",
    "# saveL1Test(logreg, allp_alltrain, y_alltrain,\n",
    "#            allp_test, \"stack1_logreg1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set:\n",
      "[[12438  2410]\n",
      " [  654  4034]]\n",
      "Accuracy = 84.31613, F1 = 72.47575\n",
      "Validation set:\n",
      "[[3101  611]\n",
      " [ 181  992]]\n",
      "Accuracy = 83.787, F1 = 71.470\n",
      "\n",
      "Saved submission file to: dump/submissions/stack1_logreg2.csv\n"
     ]
    }
   ],
   "source": [
    "## MODEL 2 (Class imbalance)\n",
    "params_logreg = {\n",
    "    'C': 1.0,\n",
    "    'class_weight': 'balanced',\n",
    "    'solver': 'lbfgs'\n",
    "}\n",
    "logreg = LogisticRegression(**params_logreg)\n",
    "runL1Model(logreg, allp_alltrain, y_alltrain)\n",
    "# saveL1Test(logreg, allp_alltrain, y_alltrain,\n",
    "#            allp_test, \"stack1_logreg2.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacked: MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[13867   981]\n",
      " [ 1447  3241]]\n",
      "Accuracy = 87.572, F1 = 72.750\n",
      "Validation set:\n",
      "[[3499  213]\n",
      " [ 381  792]]\n",
      "Accuracy = 87.840, F1 = 72.727\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[13774  1074]\n",
      " [ 1354  3335]]\n",
      "Accuracy = 87.572, F1 = 73.313\n",
      "Validation set:\n",
      "[[3427  285]\n",
      " [ 349  823]]\n",
      "Accuracy = 87.019, F1 = 72.193\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14000   848]\n",
      " [ 1578  3111]]\n",
      "Accuracy = 87.583, F1 = 71.947\n",
      "Validation set:\n",
      "[[3498  214]\n",
      " [ 418  754]]\n",
      "Accuracy = 87.060, F1 = 70.467\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14073   775]\n",
      " [ 1647  3042]]\n",
      "Accuracy = 87.603, F1 = 71.526\n",
      "Validation set:\n",
      "[[3502  210]\n",
      " [ 412  760]]\n",
      "Accuracy = 87.265, F1 = 70.962\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[13904   944]\n",
      " [ 1513  3176]]\n",
      "Accuracy = 87.424, F1 = 72.108\n",
      "Validation set:\n",
      "[[3453  259]\n",
      " [ 357  815]]\n",
      "Accuracy = 87.387, F1 = 72.573\n",
      "Saving CV predictions to: dump/log/data2_mlp.pkl\n",
      "Train set:\n",
      "[[13867   981]\n",
      " [ 1447  3241]]\n",
      "Accuracy = 0.87572, F1 = 0.72750\n",
      "Validation set:\n",
      "[[3499  213]\n",
      " [ 381  792]]\n",
      "Accuracy = 0.87840, F1 = 0.72727\n",
      "\n",
      "Train set:\n",
      "[[13774  1074]\n",
      " [ 1354  3335]]\n",
      "Accuracy = 0.87572, F1 = 0.73313\n",
      "Validation set:\n",
      "[[3427  285]\n",
      " [ 349  823]]\n",
      "Accuracy = 0.87019, F1 = 0.72193\n",
      "\n",
      "Train set:\n",
      "[[14000   848]\n",
      " [ 1578  3111]]\n",
      "Accuracy = 0.87583, F1 = 0.71947\n",
      "Validation set:\n",
      "[[3498  214]\n",
      " [ 418  754]]\n",
      "Accuracy = 0.87060, F1 = 0.70467\n",
      "\n",
      "Train set:\n",
      "[[14073   775]\n",
      " [ 1647  3042]]\n",
      "Accuracy = 0.87603, F1 = 0.71526\n",
      "Validation set:\n",
      "[[3502  210]\n",
      " [ 412  760]]\n",
      "Accuracy = 0.87265, F1 = 0.70962\n",
      "\n",
      "Train set:\n",
      "[[13904   944]\n",
      " [ 1513  3176]]\n",
      "Accuracy = 0.87424, F1 = 0.72108\n",
      "Validation set:\n",
      "[[3453  259]\n",
      " [ 357  815]]\n",
      "Accuracy = 0.87387, F1 = 0.72573\n",
      "\n",
      "dump/log/data2_mlp.pkl\n",
      "Training accuracy: 87.55 +/- 0.06%\n",
      "Validation accuracy: 87.31 +/- 0.30%\n",
      "Training F1: 0.7233 +/- 0.0063%\n",
      "Validation F1: 0.7178 +/- 0.0090%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_mlp = {\n",
    "    'hidden_layer_sizes': (12,15,18,18,18,18,18,18,18,18,12,12),\n",
    "    'max_iter': 5000,\n",
    "    'alpha': 1e-4,\n",
    "    'solver': 'adam',\n",
    "    'random_state': RAND_STATE,\n",
    "    'learning_rate_init': 0.01\n",
    "}\n",
    "mlp = MLPClassifier(**params_mlp)\n",
    "\n",
    "cv_list, p_alltrain1 = runL1ModelCV(mlp, X_alltrain, y_alltrain,\n",
    "                                    cv_filename=\"data2_mlp.pkl\",\n",
    "                                    best_threshold=False, )\n",
    "\n",
    "printCVResults(\"data2_mlp.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacked: Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[14049   799]\n",
      " [ 1556  3132]]\n",
      "Accuracy = 87.945, F1 = 72.677\n",
      "Validation set:\n",
      "[[3541  171]\n",
      " [ 427  746]]\n",
      "Accuracy = 87.758, F1 = 71.388\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14050   798]\n",
      " [ 1546  3143]]\n",
      "Accuracy = 88.002, F1 = 72.839\n",
      "Validation set:\n",
      "[[3494  218]\n",
      " [ 404  768]]\n",
      "Accuracy = 87.265, F1 = 71.177\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14007   841]\n",
      " [ 1501  3188]]\n",
      "Accuracy = 88.012, F1 = 73.136\n",
      "Validation set:\n",
      "[[3492  220]\n",
      " [ 412  760]]\n",
      "Accuracy = 87.060, F1 = 70.632\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14042   806]\n",
      " [ 1550  3139]]\n",
      "Accuracy = 87.941, F1 = 72.713\n",
      "Validation set:\n",
      "[[3484  228]\n",
      " [ 382  790]]\n",
      "Accuracy = 87.510, F1 = 72.146\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14028   820]\n",
      " [ 1524  3165]]\n",
      "Accuracy = 88.002, F1 = 72.977\n",
      "Validation set:\n",
      "[[3472  240]\n",
      " [ 370  802]]\n",
      "Accuracy = 87.510, F1 = 72.448\n",
      "Saving CV predictions to: dump/log/data2_rf.pkl\n",
      "\n",
      "Train set:\n",
      "[[14049   799]\n",
      " [ 1556  3132]]\n",
      "Accuracy = 0.87945, F1 = 0.72677\n",
      "Validation set:\n",
      "[[3541  171]\n",
      " [ 427  746]]\n",
      "Accuracy = 0.87758, F1 = 0.71388\n",
      "\n",
      "Train set:\n",
      "[[14050   798]\n",
      " [ 1546  3143]]\n",
      "Accuracy = 0.88002, F1 = 0.72839\n",
      "Validation set:\n",
      "[[3494  218]\n",
      " [ 404  768]]\n",
      "Accuracy = 0.87265, F1 = 0.71177\n",
      "\n",
      "Train set:\n",
      "[[14007   841]\n",
      " [ 1501  3188]]\n",
      "Accuracy = 0.88012, F1 = 0.73136\n",
      "Validation set:\n",
      "[[3492  220]\n",
      " [ 412  760]]\n",
      "Accuracy = 0.87060, F1 = 0.70632\n",
      "\n",
      "Train set:\n",
      "[[14042   806]\n",
      " [ 1550  3139]]\n",
      "Accuracy = 0.87941, F1 = 0.72713\n",
      "Validation set:\n",
      "[[3484  228]\n",
      " [ 382  790]]\n",
      "Accuracy = 0.87510, F1 = 0.72146\n",
      "\n",
      "Train set:\n",
      "[[14028   820]\n",
      " [ 1524  3165]]\n",
      "Accuracy = 0.88002, F1 = 0.72977\n",
      "Validation set:\n",
      "[[3472  240]\n",
      " [ 370  802]]\n",
      "Accuracy = 0.87510, F1 = 0.72448\n",
      "\n",
      "dump/log/data2_rf.pkl\n",
      "Training accuracy: 87.98 +/- 0.03%\n",
      "Validation accuracy: 87.42 +/- 0.24%\n",
      "Training F1: 0.7287 +/- 0.0017%\n",
      "Validation F1: 0.7156 +/- 0.0066%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_model = {\n",
    "    'n_estimators': 300,\n",
    "    'min_samples_split': 2,\n",
    "    'min_samples_leaf': 1,\n",
    "    'max_depth': 6,\n",
    "    'bootstrap': True,\n",
    "    'max_samples': 0.8,\n",
    "    'n_jobs': -1,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "rf = RandomForestClassifier(**params_model)\n",
    "\n",
    "cv_list, p_alltrain_rf = runL1ModelCV(rf, X_alltrain, y_alltrain,\n",
    "                                      cv_filename=\"data2_rf2.pkl\",\n",
    "                                      best_threshold=False)\n",
    "\n",
    "printCVResults(\"data2_rf.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-4f5d8f3864c7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m cv_list, p_alltrain_rf = runL1ModelCV(rf, X_alltrain, y_alltrain,\n\u001b[1;32m     14\u001b[0m                                       \u001b[0mcv_filename\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"data2_rf2.pkl\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                                       best_threshold=False)\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mprintCVResults\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"data2_rf.pkl\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-2-94a9328ee960>\u001b[0m in \u001b[0;36mrunL1ModelCV\u001b[0;34m(model, X_alltrain, y_alltrain, X_test, cv_filename, submission_filename, best_threshold, n_folds, random_state, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0my_vld\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_alltrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvld_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m         \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;31m# MODEL PREDICT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/site-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    381\u001b[0m                     \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    382\u001b[0m                     n_samples_bootstrap=n_samples_bootstrap)\n\u001b[0;32m--> 383\u001b[0;31m                 for i, t in enumerate(trees))\n\u001b[0m\u001b[1;32m    384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m             \u001b[0;31m# Collect newly grown trees\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1017\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1018\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1019\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    907\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    908\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 909\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    910\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/keras-cpu/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "params_model = {\n",
    "    'n_estimators': 100,\n",
    "    'min_samples_split': 2,\n",
    "    'min_samples_leaf': 1,\n",
    "    'max_depth': 6,\n",
    "    'bootstrap': True,\n",
    "    'max_samples': 0.8,\n",
    "    'n_jobs': -1,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "rf = RandomForestClassifier(**params_model)\n",
    "\n",
    "cv_list, p_alltrain_rf = runL1ModelCV(rf, X_alltrain, y_alltrain,\n",
    "                                      cv_filename=\"data3_rf.pkl\",\n",
    "                                      best_threshold=False)\n",
    "\n",
    "printCVResults(\"data3_rf.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[16794  1766]\n",
      " [ 1490  4371]]\n",
      "Accuracy = 0.86667, F1 = 0.72862\n"
     ]
    }
   ],
   "source": [
    "avg_rf = (p_alltrain1 + p_alltrain2)/2\n",
    "ypred_alltrain = (avg_rf > 0.5).astype(int)\n",
    "\n",
    "print(confusion_matrix(y_alltrain, ypred_alltrain))\n",
    "print(\"Accuracy = {:.5f}, F1 = {:.5f}\".format(\n",
    "    accuracy_score(y_alltrain, ypred_alltrain),\n",
    "    f1_score(y_alltrain, ypred_alltrain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "420\n",
      "Number of all possible combinations: 420\n",
      "Fitting 5 folds for each of 420 candidates, totalling 2100 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   2 tasks      | elapsed:    5.9s\n"
     ]
    }
   ],
   "source": [
    "## GRID SEARCH\n",
    "# Fixed parameters\n",
    "params_rf = {\n",
    "    'bootstrap': True,\n",
    "    'n_jobs': -1,\n",
    "    'class_weight': None,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "rf = RandomForestClassifier(**params_rf)\n",
    "\n",
    "# Search grid\n",
    "params_grid = {\n",
    "    'n_estimators': [50, 100, 300, 500, 2500, 5000, 7500],\n",
    "    'max_depth': [6, 8, 10, 24, 56],\n",
    "    'min_samples_split': [2, 5],\n",
    "    'min_samples_leaf': [2, 5],\n",
    "    'max_samples': [0.8, 0.9, None]\n",
    "}\n",
    "print(calcNCombinations(params_grid))\n",
    "\n",
    "# Search parameters\n",
    "params_search = {\n",
    "    'n_iter': 420,\n",
    "    'scoring': ['accuracy', 'f1'],\n",
    "    'cv': 5,\n",
    "    'verbose': 1,\n",
    "    'refit': False,\n",
    "    'return_train_score': True,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "\n",
    "# # Fit parameters\n",
    "# params_fit = {\n",
    "#     'cat_features': list(range(4,11)),\n",
    "#     'verbose': 100\n",
    "# }\n",
    "\n",
    "results_dict = runRandSearchCV(rf, params_grid, params_search,\n",
    "                               X_alltrain, y_alltrain,\n",
    "                               \"data2_rf.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params (Accuracy): {'n_estimators': 50, 'min_samples_split': 2, 'min_samples_leaf': 5, 'max_samples': None, 'max_depth': 8}\n",
      "Training accuracy: 88.767 +/- 0.151%\n",
      "Validation accuracy: 87.453 +/- 0.523%\n",
      "\n",
      "Best params (F1): {'n_estimators': 50, 'min_samples_split': 2, 'min_samples_leaf': 5, 'max_samples': None, 'max_depth': 8}\n",
      "Training F1: 74.742 +/- 0.482%\n",
      "Validation F1: 71.767 +/- 1.436%\n",
      "Training accuracy: 88.767 +/- 0.151%\n",
      "Validation accuracy: 87.453 +/- 0.523%\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>params</th>\n",
       "      <th>rank_test_accuracy</th>\n",
       "      <th>mean_train_accuracy</th>\n",
       "      <th>mean_test_accuracy</th>\n",
       "      <th>mean_train_f1</th>\n",
       "      <th>mean_test_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'n_estimators': 50, 'min_samples_split': 2, '...</td>\n",
       "      <td>147</td>\n",
       "      <td>0.879847</td>\n",
       "      <td>0.873510</td>\n",
       "      <td>0.728789</td>\n",
       "      <td>0.715001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'n_estimators': 100, 'min_samples_split': 2, ...</td>\n",
       "      <td>150</td>\n",
       "      <td>0.879632</td>\n",
       "      <td>0.873510</td>\n",
       "      <td>0.728297</td>\n",
       "      <td>0.715002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'n_estimators': 300, 'min_samples_split': 2, ...</td>\n",
       "      <td>4</td>\n",
       "      <td>0.879786</td>\n",
       "      <td>0.874288</td>\n",
       "      <td>0.728380</td>\n",
       "      <td>0.715591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'n_estimators': 500, 'min_samples_split': 2, ...</td>\n",
       "      <td>27</td>\n",
       "      <td>0.880042</td>\n",
       "      <td>0.873961</td>\n",
       "      <td>0.729139</td>\n",
       "      <td>0.715127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'n_estimators': 2500, 'min_samples_split': 2,...</td>\n",
       "      <td>65</td>\n",
       "      <td>0.879960</td>\n",
       "      <td>0.873797</td>\n",
       "      <td>0.729031</td>\n",
       "      <td>0.714762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>{'n_estimators': 300, 'min_samples_split': 5, ...</td>\n",
       "      <td>290</td>\n",
       "      <td>0.953452</td>\n",
       "      <td>0.871545</td>\n",
       "      <td>0.897383</td>\n",
       "      <td>0.712167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>{'n_estimators': 500, 'min_samples_split': 5, ...</td>\n",
       "      <td>253</td>\n",
       "      <td>0.953646</td>\n",
       "      <td>0.872118</td>\n",
       "      <td>0.897832</td>\n",
       "      <td>0.713142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>{'n_estimators': 2500, 'min_samples_split': 5,...</td>\n",
       "      <td>308</td>\n",
       "      <td>0.953565</td>\n",
       "      <td>0.871340</td>\n",
       "      <td>0.897627</td>\n",
       "      <td>0.711558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>418</th>\n",
       "      <td>{'n_estimators': 5000, 'min_samples_split': 5,...</td>\n",
       "      <td>286</td>\n",
       "      <td>0.953667</td>\n",
       "      <td>0.871545</td>\n",
       "      <td>0.897846</td>\n",
       "      <td>0.712041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>{'n_estimators': 7500, 'min_samples_split': 5,...</td>\n",
       "      <td>296</td>\n",
       "      <td>0.953575</td>\n",
       "      <td>0.871504</td>\n",
       "      <td>0.897640</td>\n",
       "      <td>0.712140</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>420 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                params  rank_test_accuracy  \\\n",
       "0    {'n_estimators': 50, 'min_samples_split': 2, '...                 147   \n",
       "1    {'n_estimators': 100, 'min_samples_split': 2, ...                 150   \n",
       "2    {'n_estimators': 300, 'min_samples_split': 2, ...                   4   \n",
       "3    {'n_estimators': 500, 'min_samples_split': 2, ...                  27   \n",
       "4    {'n_estimators': 2500, 'min_samples_split': 2,...                  65   \n",
       "..                                                 ...                 ...   \n",
       "415  {'n_estimators': 300, 'min_samples_split': 5, ...                 290   \n",
       "416  {'n_estimators': 500, 'min_samples_split': 5, ...                 253   \n",
       "417  {'n_estimators': 2500, 'min_samples_split': 5,...                 308   \n",
       "418  {'n_estimators': 5000, 'min_samples_split': 5,...                 286   \n",
       "419  {'n_estimators': 7500, 'min_samples_split': 5,...                 296   \n",
       "\n",
       "     mean_train_accuracy  mean_test_accuracy  mean_train_f1  mean_test_f1  \n",
       "0               0.879847            0.873510       0.728789      0.715001  \n",
       "1               0.879632            0.873510       0.728297      0.715002  \n",
       "2               0.879786            0.874288       0.728380      0.715591  \n",
       "3               0.880042            0.873961       0.729139      0.715127  \n",
       "4               0.879960            0.873797       0.729031      0.714762  \n",
       "..                   ...                 ...            ...           ...  \n",
       "415             0.953452            0.871545       0.897383      0.712167  \n",
       "416             0.953646            0.872118       0.897832      0.713142  \n",
       "417             0.953565            0.871340       0.897627      0.711558  \n",
       "418             0.953667            0.871545       0.897846      0.712041  \n",
       "419             0.953575            0.871504       0.897640      0.712140  \n",
       "\n",
       "[420 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## LOAD PARAMS\n",
    "PARAMS_RPATH = 'data2_rf.pkl'\n",
    "params_acc, params_f1, results = getGridSearchParams(PARAMS_RPATH)\n",
    "subset_results = results.loc[:,[\"params\", \"rank_test_accuracy\",\n",
    "                                \"mean_train_accuracy\", \"mean_test_accuracy\",\n",
    "                                \"mean_train_f1\", \"mean_test_f1\"]]\n",
    "subset_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bootstrap = True\n",
      "n_jobs = -1\n",
      "class_weight = None\n",
      "random_state = 0\n",
      "n_estimators = 50\n",
      "min_samples_split = 2\n",
      "min_samples_leaf = 5\n",
      "max_samples = None\n",
      "max_depth = 8\n",
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[14109   739]\n",
      " [ 1511  3177]]\n",
      "Accuracy = 88.483, F1 = 73.849\n",
      "Validation set:\n",
      "[[3547  165]\n",
      " [ 436  737]]\n",
      "Accuracy = 87.697, F1 = 71.036\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14133   715]\n",
      " [ 1466  3223]]\n",
      "Accuracy = 88.837, F1 = 74.719\n",
      "Validation set:\n",
      "[[3488  224]\n",
      " [ 404  768]]\n",
      "Accuracy = 87.142, F1 = 70.980\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14116   732]\n",
      " [ 1446  3243]]\n",
      "Accuracy = 88.852, F1 = 74.861\n",
      "Validation set:\n",
      "[[3498  214]\n",
      " [ 410  762]]\n",
      "Accuracy = 87.224, F1 = 70.950\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14094   754]\n",
      " [ 1455  3234]]\n",
      "Accuracy = 88.693, F1 = 74.542\n",
      "Validation set:\n",
      "[[3478  234]\n",
      " [ 387  785]]\n",
      "Accuracy = 87.285, F1 = 71.657\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14101   747]\n",
      " [ 1449  3240]]\n",
      "Accuracy = 88.760, F1 = 74.689\n",
      "Validation set:\n",
      "[[3468  244]\n",
      " [ 372  800]]\n",
      "Accuracy = 87.387, F1 = 72.202\n",
      "Saving CV predictions to: dump/log/data2_rf.pkl\n",
      "\n",
      "Train set:\n",
      "[[14109   739]\n",
      " [ 1511  3177]]\n",
      "Accuracy = 0.88483, F1 = 0.73849\n",
      "Validation set:\n",
      "[[3547  165]\n",
      " [ 436  737]]\n",
      "Accuracy = 0.87697, F1 = 0.71036\n",
      "\n",
      "Train set:\n",
      "[[14133   715]\n",
      " [ 1466  3223]]\n",
      "Accuracy = 0.88837, F1 = 0.74719\n",
      "Validation set:\n",
      "[[3488  224]\n",
      " [ 404  768]]\n",
      "Accuracy = 0.87142, F1 = 0.70980\n",
      "\n",
      "Train set:\n",
      "[[14116   732]\n",
      " [ 1446  3243]]\n",
      "Accuracy = 0.88852, F1 = 0.74861\n",
      "Validation set:\n",
      "[[3498  214]\n",
      " [ 410  762]]\n",
      "Accuracy = 0.87224, F1 = 0.70950\n",
      "\n",
      "Train set:\n",
      "[[14094   754]\n",
      " [ 1455  3234]]\n",
      "Accuracy = 0.88693, F1 = 0.74542\n",
      "Validation set:\n",
      "[[3478  234]\n",
      " [ 387  785]]\n",
      "Accuracy = 0.87285, F1 = 0.71657\n",
      "\n",
      "Train set:\n",
      "[[14101   747]\n",
      " [ 1449  3240]]\n",
      "Accuracy = 0.88760, F1 = 0.74689\n",
      "Validation set:\n",
      "[[3468  244]\n",
      " [ 372  800]]\n",
      "Accuracy = 0.87387, F1 = 0.72202\n",
      "\n",
      "dump/log/data2_rf.pkl\n",
      "Training accuracy: 88.72 +/- 0.13%\n",
      "Validation accuracy: 87.35 +/- 0.19%\n",
      "Training F1: 0.7453 +/- 0.0036%\n",
      "Validation F1: 0.7136 +/- 0.0049%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## INSTANTIATE MODEL\n",
    "params_rf = {\n",
    "    'bootstrap': True,\n",
    "    'n_jobs': -1,\n",
    "    'class_weight': None,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "\n",
    "params_rf.update(params_acc) # Append best params\n",
    "for parameter, value in params_rf.items():\n",
    "    print(parameter, \"=\", value)\n",
    "\n",
    "rf = RandomForestClassifier(**params_rf)\n",
    "\n",
    "cv_list, p_alltrain_rf = runL1ModelCV(rf, X_alltrain, y_alltrain,\n",
    "                                      cv_filename=\"data2_rf.pkl\")\n",
    "\n",
    "printCVResults(\"data2_rf.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacked: ExtraTrees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set\n",
      "Accuracy = 87.538% +/- 0.074\n",
      "F1 = 71.946% +/- 0.295\n",
      "Test set\n",
      "Accuracy = 87.367% +/- 0.260\n",
      "F1 = 71.525% +/- 0.968\n"
     ]
    }
   ],
   "source": [
    "params_et = {\n",
    "    'n_estimators': 10000,\n",
    "    'min_samples_split': 5,\n",
    "    'min_samples_leaf': 5,\n",
    "    'max_depth': 8,\n",
    "    'max_leaf_nodes': 20,\n",
    "    'bootstrap': True,\n",
    "    'max_samples': 0.8,\n",
    "    'n_jobs': -1,\n",
    "    'random_state': RAND_STATE\n",
    "    # 'class_weight': 'balanced_subsample'\n",
    "}\n",
    "et = ExtraTreesClassifier(**params_et)\n",
    "\n",
    "runL1Model(et, allp_alltrain, y_alltrain)\n",
    "# saveL1Test(et, allp_alltrain, y_alltrain,\n",
    "#            allp_test, \"stack1_et1.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacked: XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[13952   896]\n",
      " [ 1315  3373]]\n",
      "Accuracy = 88.682, F1 = 75.315\n",
      "Validation set:\n",
      "[[3454  258]\n",
      " [ 364  809]]\n",
      "Accuracy = 87.267, F1 = 72.232\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14036   812]\n",
      " [ 1473  3216]]\n",
      "Accuracy = 88.304, F1 = 73.787\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 350  822]]\n",
      "Accuracy = 88.002, F1 = 73.722\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14019   829]\n",
      " [ 1426  3263]]\n",
      "Accuracy = 88.458, F1 = 74.320\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 389  783]]\n",
      "Accuracy = 87.203, F1 = 71.474\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14058   790]\n",
      " [ 1466  3223]]\n",
      "Accuracy = 88.453, F1 = 74.075\n",
      "Validation set:\n",
      "[[3500  212]\n",
      " [ 402  770]]\n",
      "Accuracy = 87.428, F1 = 71.495\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14083   765]\n",
      " [ 1434  3255]]\n",
      "Accuracy = 88.744, F1 = 74.750\n",
      "Validation set:\n",
      "[[3497  215]\n",
      " [ 431  741]]\n",
      "Accuracy = 86.773, F1 = 69.643\n",
      "Saving CV predictions to: dump/log/data3_xgb.pkl\n",
      "\n",
      "Train set:\n",
      "[[13952   896]\n",
      " [ 1315  3373]]\n",
      "Accuracy = 0.88682, F1 = 0.75315\n",
      "Validation set:\n",
      "[[3454  258]\n",
      " [ 364  809]]\n",
      "Accuracy = 0.87267, F1 = 0.72232\n",
      "\n",
      "Train set:\n",
      "[[14036   812]\n",
      " [ 1473  3216]]\n",
      "Accuracy = 0.88304, F1 = 0.73787\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 350  822]]\n",
      "Accuracy = 0.88002, F1 = 0.73722\n",
      "\n",
      "Train set:\n",
      "[[14019   829]\n",
      " [ 1426  3263]]\n",
      "Accuracy = 0.88458, F1 = 0.74320\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 389  783]]\n",
      "Accuracy = 0.87203, F1 = 0.71474\n",
      "\n",
      "Train set:\n",
      "[[14058   790]\n",
      " [ 1466  3223]]\n",
      "Accuracy = 0.88453, F1 = 0.74075\n",
      "Validation set:\n",
      "[[3500  212]\n",
      " [ 402  770]]\n",
      "Accuracy = 0.87428, F1 = 0.71495\n",
      "\n",
      "Train set:\n",
      "[[14083   765]\n",
      " [ 1434  3255]]\n",
      "Accuracy = 0.88744, F1 = 0.74750\n",
      "Validation set:\n",
      "[[3497  215]\n",
      " [ 431  741]]\n",
      "Accuracy = 0.86773, F1 = 0.69643\n",
      "\n",
      "dump/log/data3_xgb.pkl\n",
      "Training accuracy: 88.53 +/- 0.16%\n",
      "Validation accuracy: 87.33 +/- 0.40%\n",
      "Training F1: 0.7445 +/- 0.0054%\n",
      "Validation F1: 0.7171 +/- 0.0132%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_xgb = {\n",
    "    'booster': 'gbtree',\n",
    "    'num_iterations': 100, # aka n_estimators  \n",
    "    'learning_rate': 0.01, # aka eta\n",
    "    'max_depth': 6,\n",
    "    'min_child_weight': 2, # similar to no. of samples in leaf\n",
    "    'gamma': 6, # larger -> more conservative; default=6\n",
    "    'subsample': 0.8,\n",
    "    'reg_alpha': 0.0,\n",
    "    'reg_lambda': 0.0,\n",
    "    'scale_pos_weight': 1,\n",
    "    'n_jobs': -1\n",
    "}\n",
    "xgb = XGBClassifier(**params_xgb)\n",
    "cv_list, p_alltrain_xgb = runL1ModelCV(xgb, X_alltrain, y_alltrain,\n",
    "                                       cv_filename=\"data3_xgb.pkl\",\n",
    "                                       best_threshold=False)\n",
    "printCVResults('data3_xgb.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "216\n",
      "Number of all possible combinations: 216\n",
      "Fitting 5 folds for each of 216 candidates, totalling 1080 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   2 tasks      | elapsed:  1.2min\n"
     ]
    }
   ],
   "source": [
    "## GRID SEARCH\n",
    "# Fixed parameters\n",
    "params_xgb = {\n",
    "    'booster': 'gbtree',\n",
    "    'objective': 'binary:logistic',\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "xgb = XGBClassifier(**params_xgb)\n",
    "\n",
    "# Search grid\n",
    "params_grid = {\n",
    "    'iterations': [30, 50, 100, 250],\n",
    "    'learning_rate': [0.001, 0.01, 0.1],\n",
    "    'max_depth': [6, 8, 10],\n",
    "    'subsample': [0.9, 1.0],\n",
    "    'min_child_weight': [1, 2, 3],\n",
    "}\n",
    "print(calcNCombinations(params_grid))\n",
    "\n",
    "# Search parameters\n",
    "params_search = {\n",
    "    'n_iter': 216,\n",
    "    'scoring': ['accuracy', 'f1'],\n",
    "    'cv': 5,\n",
    "    'verbose': 1,\n",
    "    'refit': False,\n",
    "    'return_train_score': True,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "\n",
    "# # Fit parameters\n",
    "# params_fit = {\n",
    "#     'cat_features': list(range(4,11)),\n",
    "#     'verbose': 100\n",
    "# }\n",
    "\n",
    "results_dict = runRandSearchCV(xgb, params_grid, params_search,\n",
    "                               X_alltrain, y_alltrain,\n",
    "                               \"stack2_xgb.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## LOAD PARAMS\n",
    "PARAMS_RPATH = 'stack2_xgb.pkl'\n",
    "params_acc, params_f1, results = getGridSearchParams(PARAMS_RPATH)\n",
    "subset_results = results.loc[:,[\"params\", \"rank_test_accuracy\",\n",
    "                                \"mean_train_accuracy\", \"mean_test_accuracy\",\n",
    "                                \"mean_train_f1\", \"mean_test_f1\"]]\n",
    "subset_results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacked: LGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[14848     0]\n",
      " [    3  4685]]\n",
      "Accuracy = 99.985, F1 = 99.968\n",
      "Validation set:\n",
      "[[3499  213]\n",
      " [ 447  726]]\n",
      "Accuracy = 86.489, F1 = 68.750\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14846     2]\n",
      " [    0  4689]]\n",
      "Accuracy = 99.990, F1 = 99.979\n",
      "Validation set:\n",
      "[[3447  265]\n",
      " [ 423  749]]\n",
      "Accuracy = 85.913, F1 = 68.527\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14848     0]\n",
      " [    0  4689]]\n",
      "Accuracy = 100.000, F1 = 100.000\n",
      "Validation set:\n",
      "[[3448  264]\n",
      " [ 416  756]]\n",
      "Accuracy = 86.077, F1 = 68.978\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14845     3]\n",
      " [    1  4688]]\n",
      "Accuracy = 99.980, F1 = 99.957\n",
      "Validation set:\n",
      "[[3445  267]\n",
      " [ 399  773]]\n",
      "Accuracy = 86.364, F1 = 69.892\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14847     1]\n",
      " [    2  4687]]\n",
      "Accuracy = 99.985, F1 = 99.968\n",
      "Validation set:\n",
      "[[3430  282]\n",
      " [ 386  786]]\n",
      "Accuracy = 86.323, F1 = 70.179\n",
      "Saving CV predictions to: dump/log/stack2foo_lgbm.pkl\n",
      "Train set:\n",
      "[[14848     0]\n",
      " [    3  4685]]\n",
      "Accuracy = 0.99985, F1 = 0.99968\n",
      "Validation set:\n",
      "[[3499  213]\n",
      " [ 447  726]]\n",
      "Accuracy = 0.86489, F1 = 0.68750\n",
      "\n",
      "Train set:\n",
      "[[14846     2]\n",
      " [    0  4689]]\n",
      "Accuracy = 0.99990, F1 = 0.99979\n",
      "Validation set:\n",
      "[[3447  265]\n",
      " [ 423  749]]\n",
      "Accuracy = 0.85913, F1 = 0.68527\n",
      "\n",
      "Train set:\n",
      "[[14848     0]\n",
      " [    0  4689]]\n",
      "Accuracy = 1.00000, F1 = 1.00000\n",
      "Validation set:\n",
      "[[3448  264]\n",
      " [ 416  756]]\n",
      "Accuracy = 0.86077, F1 = 0.68978\n",
      "\n",
      "Train set:\n",
      "[[14845     3]\n",
      " [    1  4688]]\n",
      "Accuracy = 0.99980, F1 = 0.99957\n",
      "Validation set:\n",
      "[[3445  267]\n",
      " [ 399  773]]\n",
      "Accuracy = 0.86364, F1 = 0.69892\n",
      "\n",
      "Train set:\n",
      "[[14847     1]\n",
      " [    2  4687]]\n",
      "Accuracy = 0.99985, F1 = 0.99968\n",
      "Validation set:\n",
      "[[3430  282]\n",
      " [ 386  786]]\n",
      "Accuracy = 0.86323, F1 = 0.70179\n",
      "\n",
      "dump/log/stack2foo_lgbm.pkl\n",
      "Training accuracy: 99.99 +/- 0.01%\n",
      "Validation accuracy: 86.23 +/- 0.21%\n",
      "Training F1: 0.9997 +/- 0.0001%\n",
      "Validation F1: 0.6927 +/- 0.0065%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_lgbm = {\n",
    "    'max_depth': 8,\n",
    "#     'learning_rate': 0.01, # Increase n_estimators when reducing learning rate\n",
    "    'n_estimators': 5000,\n",
    "#     'reg_alpha': 0.01,\n",
    "#     'reg_lambda': 0.01,\n",
    "    'min_data_in_leaf': 2,\n",
    "    'bagging_freq': 4,\n",
    "    'bagging_fraction': 0.9,\n",
    "    'feature_fraction': 0.9,\n",
    "    'random_state': RAND_STATE\n",
    "    # 'scale_pos_weight': 3\n",
    "}\n",
    "lgbm = lgb.LGBMClassifier(**params_lgbm)\n",
    "\n",
    "cv_list, p_alltrain = runL1ModelCV(lgbm, allp_alltrain, y_alltrain,\n",
    "                                   cv_filename=\"stack2foo_lgbm.pkl\",\n",
    "                                   best_threshold=False,\n",
    "                                   verbose=100)\n",
    "\n",
    "printCVResults(\"stack2foo_lgbm.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "864\n",
      "['allcat_catnb', 'nopp_et1', 'nopp_et2', 'nopp_lgbm1', 'nopp_lgbm2', 'nopp_rf1', 'nopp_rf2', 'nopp_xgb1', 'nopp_xgb2', 'pca1_svm1', 'pca1_svm2', 'pca2_mlp', 'raw1_catboost3', 'raw1_catboost4', 'wxpp1c_knn', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10']\n",
      "Number of all possible combinations: 864\n",
      "Fitting 5 folds for each of 864 candidates, totalling 4320 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   2 tasks      | elapsed:   13.5s\n",
      "[Parallel(n_jobs=-1)]: Done 152 tasks      | elapsed:   49.3s\n",
      "[Parallel(n_jobs=-1)]: Done 402 tasks      | elapsed:  2.0min\n",
      "[Parallel(n_jobs=-1)]: Done 752 tasks      | elapsed:  3.5min\n"
     ]
    }
   ],
   "source": [
    "## GRID SEARCH\n",
    "# Fixed parameters\n",
    "params_lgbm = {\n",
    "    'boosting_type': 'gbdt',\n",
    "    'num_leaves': 100,\n",
    "    'bootstrap': True,\n",
    "    'n_jobs': -1,\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "lgbm = lgb.LGBMClassifier(**params_lgbm)\n",
    "\n",
    "# Search grid\n",
    "params_grid = {\n",
    "    'iterations': [30, 50, 100, 250, 500, 750],\n",
    "    'max_depth': [6, 8, 10, 12],\n",
    "    'bagging_fraction': [0.8, 0.9, 1.0],\n",
    "    'reg_alpha': [0, 0.1, 1],\n",
    "    'reg_lambda': [0, 0.1, 1, 10]\n",
    "}\n",
    "print(calcNCombinations(params_grid))\n",
    "\n",
    "# Search parameters\n",
    "params_search = {\n",
    "    'n_iter': 864,\n",
    "    'scoring': ['accuracy', 'f1'],\n",
    "    'cv': 5,\n",
    "    'verbose': 1,\n",
    "    'refit': False,\n",
    "    'return_train_score': True,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "\n",
    "# # # Fit parameters\n",
    "# # params_fit = {\n",
    "# #     'cat_features': list(range(4,11)),\n",
    "# #     'verbose': 100\n",
    "# # }\n",
    "\n",
    "print(list(X_alltrain))\n",
    "\n",
    "results_dict = runRandSearchCV(lgbm, params_grid, params_search,\n",
    "                               X_alltrain, y_alltrain,\n",
    "                               \"stack2_lgbm.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params (Accuracy): {'reg_lambda': 10, 'reg_alpha': 0.1, 'max_depth': 12, 'learning_rate': 0.1, 'iterations': 500, 'bagging_fraction': 0.8}\n",
      "Training accuracy: 89.666 +/- 0.195%\n",
      "Validation accuracy: 87.326 +/- 0.470%\n",
      "\n",
      "Best params (F1): {'reg_lambda': 10, 'reg_alpha': 0.1, 'max_depth': 12, 'learning_rate': 0.1, 'iterations': 500, 'bagging_fraction': 0.8}\n",
      "Training F1: 76.847 +/- 0.460%\n",
      "Validation F1: 71.442 +/- 1.352%\n",
      "Training accuracy: 89.666 +/- 0.195%\n",
      "Validation accuracy: 87.326 +/- 0.470%\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>params</th>\n",
       "      <th>rank_test_accuracy</th>\n",
       "      <th>mean_train_accuracy</th>\n",
       "      <th>mean_test_accuracy</th>\n",
       "      <th>mean_train_f1</th>\n",
       "      <th>mean_test_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'reg_lambda': 0, 'reg_alpha': 0, 'max_depth':...</td>\n",
       "      <td>196</td>\n",
       "      <td>0.894834</td>\n",
       "      <td>0.871873</td>\n",
       "      <td>0.763902</td>\n",
       "      <td>0.711590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'reg_lambda': 0.1, 'reg_alpha': 0, 'max_depth...</td>\n",
       "      <td>76</td>\n",
       "      <td>0.893811</td>\n",
       "      <td>0.872610</td>\n",
       "      <td>0.761606</td>\n",
       "      <td>0.713452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'reg_lambda': 1, 'reg_alpha': 0, 'max_depth':...</td>\n",
       "      <td>211</td>\n",
       "      <td>0.892613</td>\n",
       "      <td>0.871832</td>\n",
       "      <td>0.758656</td>\n",
       "      <td>0.711421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'reg_lambda': 10, 'reg_alpha': 0, 'max_depth'...</td>\n",
       "      <td>31</td>\n",
       "      <td>0.887412</td>\n",
       "      <td>0.872978</td>\n",
       "      <td>0.746550</td>\n",
       "      <td>0.713413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'reg_lambda': 0, 'reg_alpha': 0.1, 'max_depth...</td>\n",
       "      <td>61</td>\n",
       "      <td>0.895817</td>\n",
       "      <td>0.872773</td>\n",
       "      <td>0.766279</td>\n",
       "      <td>0.713948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1435</th>\n",
       "      <td>{'reg_lambda': 10, 'reg_alpha': 0.1, 'max_dept...</td>\n",
       "      <td>1066</td>\n",
       "      <td>0.864788</td>\n",
       "      <td>0.863233</td>\n",
       "      <td>0.642229</td>\n",
       "      <td>0.637615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1436</th>\n",
       "      <td>{'reg_lambda': 0, 'reg_alpha': 1, 'max_depth':...</td>\n",
       "      <td>1171</td>\n",
       "      <td>0.867808</td>\n",
       "      <td>0.863151</td>\n",
       "      <td>0.651876</td>\n",
       "      <td>0.638444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1437</th>\n",
       "      <td>{'reg_lambda': 0.1, 'reg_alpha': 1, 'max_depth...</td>\n",
       "      <td>1021</td>\n",
       "      <td>0.867604</td>\n",
       "      <td>0.863274</td>\n",
       "      <td>0.651392</td>\n",
       "      <td>0.638797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1438</th>\n",
       "      <td>{'reg_lambda': 1, 'reg_alpha': 1, 'max_depth':...</td>\n",
       "      <td>841</td>\n",
       "      <td>0.866703</td>\n",
       "      <td>0.863478</td>\n",
       "      <td>0.647821</td>\n",
       "      <td>0.638723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1439</th>\n",
       "      <td>{'reg_lambda': 10, 'reg_alpha': 1, 'max_depth'...</td>\n",
       "      <td>1141</td>\n",
       "      <td>0.864481</td>\n",
       "      <td>0.863192</td>\n",
       "      <td>0.641331</td>\n",
       "      <td>0.637359</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1440 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 params  rank_test_accuracy  \\\n",
       "0     {'reg_lambda': 0, 'reg_alpha': 0, 'max_depth':...                 196   \n",
       "1     {'reg_lambda': 0.1, 'reg_alpha': 0, 'max_depth...                  76   \n",
       "2     {'reg_lambda': 1, 'reg_alpha': 0, 'max_depth':...                 211   \n",
       "3     {'reg_lambda': 10, 'reg_alpha': 0, 'max_depth'...                  31   \n",
       "4     {'reg_lambda': 0, 'reg_alpha': 0.1, 'max_depth...                  61   \n",
       "...                                                 ...                 ...   \n",
       "1435  {'reg_lambda': 10, 'reg_alpha': 0.1, 'max_dept...                1066   \n",
       "1436  {'reg_lambda': 0, 'reg_alpha': 1, 'max_depth':...                1171   \n",
       "1437  {'reg_lambda': 0.1, 'reg_alpha': 1, 'max_depth...                1021   \n",
       "1438  {'reg_lambda': 1, 'reg_alpha': 1, 'max_depth':...                 841   \n",
       "1439  {'reg_lambda': 10, 'reg_alpha': 1, 'max_depth'...                1141   \n",
       "\n",
       "      mean_train_accuracy  mean_test_accuracy  mean_train_f1  mean_test_f1  \n",
       "0                0.894834            0.871873       0.763902      0.711590  \n",
       "1                0.893811            0.872610       0.761606      0.713452  \n",
       "2                0.892613            0.871832       0.758656      0.711421  \n",
       "3                0.887412            0.872978       0.746550      0.713413  \n",
       "4                0.895817            0.872773       0.766279      0.713948  \n",
       "...                   ...                 ...            ...           ...  \n",
       "1435             0.864788            0.863233       0.642229      0.637615  \n",
       "1436             0.867808            0.863151       0.651876      0.638444  \n",
       "1437             0.867604            0.863274       0.651392      0.638797  \n",
       "1438             0.866703            0.863478       0.647821      0.638723  \n",
       "1439             0.864481            0.863192       0.641331      0.637359  \n",
       "\n",
       "[1440 rows x 6 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## LOAD PARAMS\n",
    "PARAMS_RPATH = 'data2_lgbm.pkl'\n",
    "params_acc, params_f1, results = getGridSearchParams(PARAMS_RPATH)\n",
    "subset_results = results.loc[:,[\"params\", \"rank_test_accuracy\",\n",
    "                                \"mean_train_accuracy\", \"mean_test_accuracy\",\n",
    "                                \"mean_train_f1\", \"mean_test_f1\"]]\n",
    "subset_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boosting_type = gbdt\n",
      "num_leaves = 100\n",
      "bootstrap = True\n",
      "n_jobs = -1\n",
      "random_seed = 0\n",
      "reg_lambda = 10\n",
      "reg_alpha = 0.1\n",
      "max_depth = 12\n",
      "learning_rate = 0.1\n",
      "iterations = 500\n",
      "bagging_fraction = 0.8\n",
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[14418   430]\n",
      " [  926  3762]]\n",
      "Accuracy = 93.059, F1 = 84.730\n",
      "Validation set:\n",
      "[[3526  186]\n",
      " [ 420  753]]\n",
      "Accuracy = 87.595, F1 = 71.307\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14414   434]\n",
      " [  998  3691]]\n",
      "Accuracy = 92.670, F1 = 83.753\n",
      "Validation set:\n",
      "[[3478  234]\n",
      " [ 408  764]]\n",
      "Accuracy = 86.855, F1 = 70.415\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14353   495]\n",
      " [  972  3717]]\n",
      "Accuracy = 92.491, F1 = 83.519\n",
      "Validation set:\n",
      "[[3474  238]\n",
      " [ 399  773]]\n",
      "Accuracy = 86.957, F1 = 70.820\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[14365   483]\n",
      " [  964  3725]]\n",
      "Accuracy = 92.594, F1 = 83.736\n",
      "Validation set:\n",
      "[[3485  227]\n",
      " [ 387  785]]\n",
      "Accuracy = 87.428, F1 = 71.886\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14389   459]\n",
      " [  962  3727]]\n",
      "Accuracy = 92.727, F1 = 83.989\n",
      "Validation set:\n",
      "[[3465  247]\n",
      " [ 384  788]]\n",
      "Accuracy = 87.080, F1 = 71.409\n",
      "Saving CV predictions to: dump/log/data2_lgbm.pkl\n",
      "\n",
      "Train set:\n",
      "[[14418   430]\n",
      " [  926  3762]]\n",
      "Accuracy = 0.93059, F1 = 0.84730\n",
      "Validation set:\n",
      "[[3526  186]\n",
      " [ 420  753]]\n",
      "Accuracy = 0.87595, F1 = 0.71307\n",
      "\n",
      "Train set:\n",
      "[[14414   434]\n",
      " [  998  3691]]\n",
      "Accuracy = 0.92670, F1 = 0.83753\n",
      "Validation set:\n",
      "[[3478  234]\n",
      " [ 408  764]]\n",
      "Accuracy = 0.86855, F1 = 0.70415\n",
      "\n",
      "Train set:\n",
      "[[14353   495]\n",
      " [  972  3717]]\n",
      "Accuracy = 0.92491, F1 = 0.83519\n",
      "Validation set:\n",
      "[[3474  238]\n",
      " [ 399  773]]\n",
      "Accuracy = 0.86957, F1 = 0.70820\n",
      "\n",
      "Train set:\n",
      "[[14365   483]\n",
      " [  964  3725]]\n",
      "Accuracy = 0.92594, F1 = 0.83736\n",
      "Validation set:\n",
      "[[3485  227]\n",
      " [ 387  785]]\n",
      "Accuracy = 0.87428, F1 = 0.71886\n",
      "\n",
      "Train set:\n",
      "[[14389   459]\n",
      " [  962  3727]]\n",
      "Accuracy = 0.92727, F1 = 0.83989\n",
      "Validation set:\n",
      "[[3465  247]\n",
      " [ 384  788]]\n",
      "Accuracy = 0.87080, F1 = 0.71409\n",
      "\n",
      "dump/log/data2_lgbm.pkl\n",
      "Training accuracy: 92.71 +/- 0.19%\n",
      "Validation accuracy: 87.18 +/- 0.28%\n",
      "Training F1: 0.8395 +/- 0.0042%\n",
      "Validation F1: 0.7117 +/- 0.0051%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## INSTANTIATE MODEL\n",
    "params_lgbm = {\n",
    "    'boosting_type': 'gbdt',\n",
    "    'num_leaves': 100,\n",
    "    'bootstrap': True,\n",
    "    'n_jobs': -1,\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "\n",
    "params_lgbm.update(params_acc) # Append best params\n",
    "for parameter, value in params_lgbm.items():\n",
    "    print(parameter, \"=\", value)\n",
    "\n",
    "lgbm = lgb.LGBMClassifier(**params_lgbm)\n",
    "\n",
    "cv_list, p_alltrain_lgbm = runL1ModelCV(lgbm, X_alltrain, y_alltrain,\n",
    "                                  cv_filename=\"data2_lgbm.pkl\",\n",
    "                                  # submission_filename='data2_lgbm.csv',\n",
    "                                  verbose=100)\n",
    "\n",
    "printCVResults(\"data2_lgbm.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model: CatBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "col_idx = [\n",
    "    'allcat_catnb',\n",
    "    'nopp_et1',\n",
    "    'nopp_et2',\n",
    "    'nopp_lgbm1',\n",
    "    'nopp_lgbm2',\n",
    "    'nopp_rf1',\n",
    "    'nopp_rf2',\n",
    "    'raw1_catboost3',\n",
    "    'raw1_catboost4',\n",
    "    'PC1',\n",
    "    'PC2',\n",
    "    'PC3',\n",
    "    'PC4',\n",
    "    'PC5',\n",
    "    'PC6',\n",
    "    'PC7',\n",
    "    'PC8',\n",
    "    'PC9',\n",
    "    'PC10'\n",
    "]\n",
    "Xsub_alltrain = X_alltrain.loc[:, col_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "0:\tlearn: 0.6753034\ttotal: 9.78ms\tremaining: 284ms\n",
      "29:\tlearn: 0.4075712\ttotal: 249ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13836  1012]\n",
      " [ 1457  3231]]\n",
      "Accuracy = 87.362, F1 = 72.355\n",
      "Validation set:\n",
      "[[3492  220]\n",
      " [ 379  794]]\n",
      "Accuracy = 87.738, F1 = 72.611\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "0:\tlearn: 0.6751148\ttotal: 20.3ms\tremaining: 588ms\n",
      "29:\tlearn: 0.4059302\ttotal: 311ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13805  1043]\n",
      " [ 1416  3273]]\n",
      "Accuracy = 87.414, F1 = 72.693\n",
      "Validation set:\n",
      "[[3431  281]\n",
      " [ 356  816]]\n",
      "Accuracy = 86.957, F1 = 71.926\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "0:\tlearn: 0.6751580\ttotal: 7.14ms\tremaining: 207ms\n",
      "29:\tlearn: 0.4056760\ttotal: 211ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13853   995]\n",
      " [ 1459  3230]]\n",
      "Accuracy = 87.439, F1 = 72.470\n",
      "Validation set:\n",
      "[[3468  244]\n",
      " [ 384  788]]\n",
      "Accuracy = 87.142, F1 = 71.506\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "0:\tlearn: 0.6747650\ttotal: 7.02ms\tremaining: 204ms\n",
      "29:\tlearn: 0.4057559\ttotal: 208ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13761  1087]\n",
      " [ 1412  3277]]\n",
      "Accuracy = 87.209, F1 = 72.396\n",
      "Validation set:\n",
      "[[3445  267]\n",
      " [ 340  832]]\n",
      "Accuracy = 87.572, F1 = 73.272\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "0:\tlearn: 0.6750001\ttotal: 15.3ms\tremaining: 445ms\n",
      "29:\tlearn: 0.4068278\ttotal: 268ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13780  1068]\n",
      " [ 1405  3284]]\n",
      "Accuracy = 87.342, F1 = 72.647\n",
      "Validation set:\n",
      "[[3428  284]\n",
      " [ 343  829]]\n",
      "Accuracy = 87.162, F1 = 72.560\n",
      "Saving CV predictions to: dump/log/xsub_catboost.pkl\n",
      "\n",
      "Train set:\n",
      "[[13836  1012]\n",
      " [ 1457  3231]]\n",
      "Accuracy = 0.87362, F1 = 0.72355\n",
      "Validation set:\n",
      "[[3492  220]\n",
      " [ 379  794]]\n",
      "Accuracy = 0.87738, F1 = 0.72611\n",
      "\n",
      "Train set:\n",
      "[[13805  1043]\n",
      " [ 1416  3273]]\n",
      "Accuracy = 0.87414, F1 = 0.72693\n",
      "Validation set:\n",
      "[[3431  281]\n",
      " [ 356  816]]\n",
      "Accuracy = 0.86957, F1 = 0.71926\n",
      "\n",
      "Train set:\n",
      "[[13853   995]\n",
      " [ 1459  3230]]\n",
      "Accuracy = 0.87439, F1 = 0.72470\n",
      "Validation set:\n",
      "[[3468  244]\n",
      " [ 384  788]]\n",
      "Accuracy = 0.87142, F1 = 0.71506\n",
      "\n",
      "Train set:\n",
      "[[13761  1087]\n",
      " [ 1412  3277]]\n",
      "Accuracy = 0.87209, F1 = 0.72396\n",
      "Validation set:\n",
      "[[3445  267]\n",
      " [ 340  832]]\n",
      "Accuracy = 0.87572, F1 = 0.73272\n",
      "\n",
      "Train set:\n",
      "[[13780  1068]\n",
      " [ 1405  3284]]\n",
      "Accuracy = 0.87342, F1 = 0.72647\n",
      "Validation set:\n",
      "[[3428  284]\n",
      " [ 343  829]]\n",
      "Accuracy = 0.87162, F1 = 0.72560\n",
      "\n",
      "dump/log/xsub_catboost.pkl\n",
      "Training accuracy: 87.35 +/- 0.08%\n",
      "Validation accuracy: 87.31 +/- 0.29%\n",
      "Training F1: 0.7251 +/- 0.0013%\n",
      "Validation F1: 0.7238 +/- 0.0061%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## FROM FIRST SEARCH\n",
    "params_catboost3 = {\n",
    "    'iterations': 50, # n_estimators\n",
    "    'depth': 4,\n",
    "    'l2_leaf_reg': 1,\n",
    "    'scale_pos_weight': 1.1,\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "\n",
    "catboost = CatBoostClassifier(**params_catboost3)\n",
    "\n",
    "cv_list, p_alltrain = runL1ModelCV(catboost, Xsub_alltrain, y_alltrain,\n",
    "                                   cv_filename=\"xsub_catboost.pkl\",\n",
    "                                   best_threshold=False,\n",
    "                                   verbose=100)\n",
    "\n",
    "printCVResults(\"xsub_catboost.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "360\n",
      "['allcat_catnb', 'nopp_et1', 'nopp_et2', 'nopp_lgbm1', 'nopp_lgbm2', 'nopp_rf1', 'nopp_rf2', 'nopp_xgb1', 'nopp_xgb2', 'pca1_svm1', 'pca1_svm2', 'pca2_mlp', 'raw1_catboost3', 'raw1_catboost4', 'wxpp1c_knn', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10']\n",
      "Number of all possible combinations: 360\n",
      "Fitting 5 folds for each of 360 candidates, totalling 1800 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   2 tasks      | elapsed:   28.9s\n"
     ]
    }
   ],
   "source": [
    "## GRID SEARCH\n",
    "# Fixed parameters\n",
    "params_catboost = {\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "catboost = CatBoostClassifier(**params_catboost)\n",
    "\n",
    "# Search grid\n",
    "params_grid = {\n",
    "    'iterations': [30, 50, 100, 250, 500],\n",
    "    'depth': [4, 6, 8, 10],\n",
    "    'grow_policy': ['SymmetricTree', 'Depthwise'],\n",
    "    'l2_leaf_reg': [1, 3, 5],\n",
    "    'bagging_temperature': [0, 1, 5],\n",
    "}\n",
    "print(calcNCombinations(params_grid))\n",
    "\n",
    "# Search parameters\n",
    "params_search = {\n",
    "    'n_iter': 360,\n",
    "    'scoring': ['accuracy', 'f1'],\n",
    "    'cv': 5,\n",
    "    'verbose': 1,\n",
    "    'refit': False,\n",
    "    'return_train_score': True,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "\n",
    "# Fit parameters\n",
    "params_fit = {\n",
    "    'verbose': 100\n",
    "}\n",
    "\n",
    "print(list(X_alltrain))\n",
    "\n",
    "results_dict = runRandSearchCV(catboost, params_grid, params_search,\n",
    "                               X_alltrain, y_alltrain,\n",
    "                               \"stack2_catboost.pkl\", params_fit=params_fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params (Accuracy): {'l2_leaf_reg': 3, 'iterations': 30, 'grow_policy': 'Depthwise', 'depth': 4, 'bagging_temperature': 0}\n",
      "Training accuracy: 87.549 +/- 0.125%\n",
      "Validation accuracy: 87.470 +/- 0.498%\n",
      "\n",
      "Best params (F1): {'l2_leaf_reg': 1, 'iterations': 30, 'grow_policy': 'SymmetricTree', 'depth': 6, 'bagging_temperature': 0}\n",
      "Training F1: 72.028 +/- 0.304%\n",
      "Validation F1: 71.743 +/- 1.230%\n",
      "Training accuracy: 87.544 +/- 0.116%\n",
      "Validation accuracy: 87.429 +/- 0.414%\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>params</th>\n",
       "      <th>rank_test_accuracy</th>\n",
       "      <th>mean_train_accuracy</th>\n",
       "      <th>mean_test_accuracy</th>\n",
       "      <th>mean_train_f1</th>\n",
       "      <th>mean_test_f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'l2_leaf_reg': 1, 'iterations': 30, 'grow_pol...</td>\n",
       "      <td>28</td>\n",
       "      <td>0.874411</td>\n",
       "      <td>0.874289</td>\n",
       "      <td>0.717362</td>\n",
       "      <td>0.716910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'l2_leaf_reg': 3, 'iterations': 30, 'grow_pol...</td>\n",
       "      <td>172</td>\n",
       "      <td>0.874770</td>\n",
       "      <td>0.873633</td>\n",
       "      <td>0.717329</td>\n",
       "      <td>0.714548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'l2_leaf_reg': 5, 'iterations': 30, 'grow_pol...</td>\n",
       "      <td>52</td>\n",
       "      <td>0.874739</td>\n",
       "      <td>0.874207</td>\n",
       "      <td>0.717877</td>\n",
       "      <td>0.715926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'l2_leaf_reg': 1, 'iterations': 50, 'grow_pol...</td>\n",
       "      <td>61</td>\n",
       "      <td>0.874780</td>\n",
       "      <td>0.874166</td>\n",
       "      <td>0.717609</td>\n",
       "      <td>0.715812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'l2_leaf_reg': 3, 'iterations': 50, 'grow_pol...</td>\n",
       "      <td>166</td>\n",
       "      <td>0.874811</td>\n",
       "      <td>0.873674</td>\n",
       "      <td>0.717175</td>\n",
       "      <td>0.714354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>535</th>\n",
       "      <td>{'l2_leaf_reg': 3, 'iterations': 250, 'grow_po...</td>\n",
       "      <td>395</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>{'l2_leaf_reg': 5, 'iterations': 250, 'grow_po...</td>\n",
       "      <td>394</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>537</th>\n",
       "      <td>{'l2_leaf_reg': 1, 'iterations': 500, 'grow_po...</td>\n",
       "      <td>393</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>538</th>\n",
       "      <td>{'l2_leaf_reg': 3, 'iterations': 500, 'grow_po...</td>\n",
       "      <td>530</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>539</th>\n",
       "      <td>{'l2_leaf_reg': 5, 'iterations': 500, 'grow_po...</td>\n",
       "      <td>540</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>540 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                params  rank_test_accuracy  \\\n",
       "0    {'l2_leaf_reg': 1, 'iterations': 30, 'grow_pol...                  28   \n",
       "1    {'l2_leaf_reg': 3, 'iterations': 30, 'grow_pol...                 172   \n",
       "2    {'l2_leaf_reg': 5, 'iterations': 30, 'grow_pol...                  52   \n",
       "3    {'l2_leaf_reg': 1, 'iterations': 50, 'grow_pol...                  61   \n",
       "4    {'l2_leaf_reg': 3, 'iterations': 50, 'grow_pol...                 166   \n",
       "..                                                 ...                 ...   \n",
       "535  {'l2_leaf_reg': 3, 'iterations': 250, 'grow_po...                 395   \n",
       "536  {'l2_leaf_reg': 5, 'iterations': 250, 'grow_po...                 394   \n",
       "537  {'l2_leaf_reg': 1, 'iterations': 500, 'grow_po...                 393   \n",
       "538  {'l2_leaf_reg': 3, 'iterations': 500, 'grow_po...                 530   \n",
       "539  {'l2_leaf_reg': 5, 'iterations': 500, 'grow_po...                 540   \n",
       "\n",
       "     mean_train_accuracy  mean_test_accuracy  mean_train_f1  mean_test_f1  \n",
       "0               0.874411            0.874289       0.717362      0.716910  \n",
       "1               0.874770            0.873633       0.717329      0.714548  \n",
       "2               0.874739            0.874207       0.717877      0.715926  \n",
       "3               0.874780            0.874166       0.717609      0.715812  \n",
       "4               0.874811            0.873674       0.717175      0.714354  \n",
       "..                   ...                 ...            ...           ...  \n",
       "535                  NaN                 NaN            NaN           NaN  \n",
       "536                  NaN                 NaN            NaN           NaN  \n",
       "537                  NaN                 NaN            NaN           NaN  \n",
       "538                  NaN                 NaN            NaN           NaN  \n",
       "539                  NaN                 NaN            NaN           NaN  \n",
       "\n",
       "[540 rows x 6 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## LOAD PARAMS\n",
    "PARAMS_RPATH = 'data2_catboost.pkl'\n",
    "params_acc, params_f1, results = getGridSearchParams(PARAMS_RPATH)\n",
    "subset_results = results.loc[:,[\"params\", \"rank_test_accuracy\",\n",
    "                                \"mean_train_accuracy\", \"mean_test_accuracy\",\n",
    "                                \"mean_train_f1\", \"mean_test_f1\"]]\n",
    "subset_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param_iterations</th>\n",
       "      <th>mean_test_accuracy</th>\n",
       "      <th>param_depth</th>\n",
       "      <th>param_grow_policy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874084</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873715</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874166</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874125</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874207</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873920</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874084</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873715</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874166</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874125</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874207</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873920</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>411</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874084</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>412</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873715</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874166</td>\n",
       "      <td>6</td>\n",
       "      <td>SymmetricTree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874125</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>427</th>\n",
       "      <td>100</td>\n",
       "      <td>0.874207</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>428</th>\n",
       "      <td>100</td>\n",
       "      <td>0.873920</td>\n",
       "      <td>6</td>\n",
       "      <td>Depthwise</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>442</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>100</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    param_iterations  mean_test_accuracy param_depth param_grow_policy\n",
       "51               100            0.874084           6     SymmetricTree\n",
       "52               100            0.873715           6     SymmetricTree\n",
       "53               100            0.874166           6     SymmetricTree\n",
       "66               100            0.874125           6         Depthwise\n",
       "67               100            0.874207           6         Depthwise\n",
       "68               100            0.873920           6         Depthwise\n",
       "81               100                 NaN           6              None\n",
       "82               100                 NaN           6              None\n",
       "83               100                 NaN           6              None\n",
       "231              100            0.874084           6     SymmetricTree\n",
       "232              100            0.873715           6     SymmetricTree\n",
       "233              100            0.874166           6     SymmetricTree\n",
       "246              100            0.874125           6         Depthwise\n",
       "247              100            0.874207           6         Depthwise\n",
       "248              100            0.873920           6         Depthwise\n",
       "261              100                 NaN           6              None\n",
       "262              100                 NaN           6              None\n",
       "263              100                 NaN           6              None\n",
       "411              100            0.874084           6     SymmetricTree\n",
       "412              100            0.873715           6     SymmetricTree\n",
       "413              100            0.874166           6     SymmetricTree\n",
       "426              100            0.874125           6         Depthwise\n",
       "427              100            0.874207           6         Depthwise\n",
       "428              100            0.873920           6         Depthwise\n",
       "441              100                 NaN           6              None\n",
       "442              100                 NaN           6              None\n",
       "443              100                 NaN           6              None"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.loc[(results.param_iterations == 100) & (results.param_depth == 6),['param_iterations','mean_test_accuracy', 'param_depth','param_grow_policy']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random_seed = 0\n",
      "l2_leaf_reg = 3\n",
      "iterations = 30\n",
      "grow_policy = Depthwise\n",
      "depth = 4\n",
      "bagging_temperature = 0\n",
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "0:\tlearn: 0.6564514\ttotal: 42.9ms\tremaining: 1.24s\n",
      "29:\tlearn: 0.3181322\ttotal: 868ms\tremaining: 0us\n",
      "Train set:\n",
      "[[14019   829]\n",
      " [ 1618  3070]]\n",
      "Accuracy = 87.474, F1 = 71.503\n",
      "Validation set:\n",
      "[[3544  168]\n",
      " [ 429  744]]\n",
      "Accuracy = 87.779, F1 = 71.367\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "0:\tlearn: 0.6561641\ttotal: 28.4ms\tremaining: 823ms\n",
      "29:\tlearn: 0.3179778\ttotal: 839ms\tremaining: 0us\n",
      "Train set:\n",
      "[[14038   810]\n",
      " [ 1606  3083]]\n",
      "Accuracy = 87.634, F1 = 71.848\n",
      "Validation set:\n",
      "[[3490  222]\n",
      " [ 401  771]]\n",
      "Accuracy = 87.244, F1 = 71.224\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "0:\tlearn: 0.6560306\ttotal: 30.6ms\tremaining: 888ms\n",
      "29:\tlearn: 0.3172998\ttotal: 897ms\tremaining: 0us\n",
      "Train set:\n",
      "[[14003   845]\n",
      " [ 1578  3111]]\n",
      "Accuracy = 87.598, F1 = 71.972\n",
      "Validation set:\n",
      "[[3495  217]\n",
      " [ 411  761]]\n",
      "Accuracy = 87.142, F1 = 70.791\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "0:\tlearn: 0.6548036\ttotal: 57.9ms\tremaining: 1.68s\n",
      "29:\tlearn: 0.3168380\ttotal: 888ms\tremaining: 0us\n",
      "Train set:\n",
      "[[14016   832]\n",
      " [ 1610  3079]]\n",
      "Accuracy = 87.501, F1 = 71.605\n",
      "Validation set:\n",
      "[[3495  217]\n",
      " [ 391  781]]\n",
      "Accuracy = 87.551, F1 = 71.982\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "0:\tlearn: 0.6562773\ttotal: 31.9ms\tremaining: 925ms\n",
      "29:\tlearn: 0.3202499\ttotal: 924ms\tremaining: 0us\n",
      "Train set:\n",
      "[[14001   847]\n",
      " [ 1589  3100]]\n",
      "Accuracy = 87.531, F1 = 71.792\n",
      "Validation set:\n",
      "[[3477  235]\n",
      " [ 380  792]]\n",
      "Accuracy = 87.408, F1 = 72.033\n",
      "Saving CV predictions to: dump/log/data2_catboost.pkl\n",
      "\n",
      "Train set:\n",
      "[[14019   829]\n",
      " [ 1618  3070]]\n",
      "Accuracy = 0.87474, F1 = 0.71503\n",
      "Validation set:\n",
      "[[3544  168]\n",
      " [ 429  744]]\n",
      "Accuracy = 0.87779, F1 = 0.71367\n",
      "\n",
      "Train set:\n",
      "[[14038   810]\n",
      " [ 1606  3083]]\n",
      "Accuracy = 0.87634, F1 = 0.71848\n",
      "Validation set:\n",
      "[[3490  222]\n",
      " [ 401  771]]\n",
      "Accuracy = 0.87244, F1 = 0.71224\n",
      "\n",
      "Train set:\n",
      "[[14003   845]\n",
      " [ 1578  3111]]\n",
      "Accuracy = 0.87598, F1 = 0.71972\n",
      "Validation set:\n",
      "[[3495  217]\n",
      " [ 411  761]]\n",
      "Accuracy = 0.87142, F1 = 0.70791\n",
      "\n",
      "Train set:\n",
      "[[14016   832]\n",
      " [ 1610  3079]]\n",
      "Accuracy = 0.87501, F1 = 0.71605\n",
      "Validation set:\n",
      "[[3495  217]\n",
      " [ 391  781]]\n",
      "Accuracy = 0.87551, F1 = 0.71982\n",
      "\n",
      "Train set:\n",
      "[[14001   847]\n",
      " [ 1589  3100]]\n",
      "Accuracy = 0.87531, F1 = 0.71792\n",
      "Validation set:\n",
      "[[3477  235]\n",
      " [ 380  792]]\n",
      "Accuracy = 0.87408, F1 = 0.72033\n",
      "\n",
      "dump/log/data2_catboost.pkl\n",
      "Training accuracy: 87.55 +/- 0.06%\n",
      "Validation accuracy: 87.42 +/- 0.23%\n",
      "Training F1: 0.7174 +/- 0.0017%\n",
      "Validation F1: 0.7148 +/- 0.0047%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## INSTANTIATE MODEL\n",
    "params_catboost = {\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "\n",
    "\n",
    "params_catboost.update(params_acc) # Append best params\n",
    "for parameter, value in params_catboost.items():\n",
    "    print(parameter, \"=\", value)\n",
    "\n",
    "catboost = CatBoostClassifier(**params_catboost)\n",
    "\n",
    "cv_list, p_alltrain_catboost = runL1ModelCV(catboost, X_alltrain, y_alltrain,\n",
    "                                           cv_filename=\"data2_catboost.pkl\",\n",
    "#                                            submission_filename='data2_catboost.csv',\n",
    "                                           verbose=100)\n",
    "\n",
    "printCVResults(\"data2_catboost.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model: KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[13956   892]\n",
      " [ 1615  3073]]\n",
      "Accuracy = 87.167, F1 = 71.027\n",
      "Validation set:\n",
      "[[3526  186]\n",
      " [ 430  743]]\n",
      "Accuracy = 87.390, F1 = 70.695\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[13990   858]\n",
      " [ 1573  3116]]\n",
      "Accuracy = 87.557, F1 = 71.938\n",
      "Validation set:\n",
      "[[3471  241]\n",
      " [ 414  758]]\n",
      "Accuracy = 86.589, F1 = 69.830\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[14020   828]\n",
      " [ 1568  3121]]\n",
      "Accuracy = 87.736, F1 = 72.262\n",
      "Validation set:\n",
      "[[3466  246]\n",
      " [ 439  733]]\n",
      "Accuracy = 85.975, F1 = 68.154\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[13981   867]\n",
      " [ 1557  3132]]\n",
      "Accuracy = 87.593, F1 = 72.099\n",
      "Validation set:\n",
      "[[3472  240]\n",
      " [ 421  751]]\n",
      "Accuracy = 86.466, F1 = 69.441\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[13995   853]\n",
      " [ 1595  3094]]\n",
      "Accuracy = 87.470, F1 = 71.654\n",
      "Validation set:\n",
      "[[3443  269]\n",
      " [ 385  787]]\n",
      "Accuracy = 86.609, F1 = 70.646\n",
      "Saving CV predictions to: dump/log/data2_knn.pkl\n",
      "\n",
      "Train set:\n",
      "[[13956   892]\n",
      " [ 1615  3073]]\n",
      "Accuracy = 0.87167, F1 = 0.71027\n",
      "Validation set:\n",
      "[[3526  186]\n",
      " [ 430  743]]\n",
      "Accuracy = 0.87390, F1 = 0.70695\n",
      "\n",
      "Train set:\n",
      "[[13990   858]\n",
      " [ 1573  3116]]\n",
      "Accuracy = 0.87557, F1 = 0.71938\n",
      "Validation set:\n",
      "[[3471  241]\n",
      " [ 414  758]]\n",
      "Accuracy = 0.86589, F1 = 0.69830\n",
      "\n",
      "Train set:\n",
      "[[14020   828]\n",
      " [ 1568  3121]]\n",
      "Accuracy = 0.87736, F1 = 0.72262\n",
      "Validation set:\n",
      "[[3466  246]\n",
      " [ 439  733]]\n",
      "Accuracy = 0.85975, F1 = 0.68154\n",
      "\n",
      "Train set:\n",
      "[[13981   867]\n",
      " [ 1557  3132]]\n",
      "Accuracy = 0.87593, F1 = 0.72099\n",
      "Validation set:\n",
      "[[3472  240]\n",
      " [ 421  751]]\n",
      "Accuracy = 0.86466, F1 = 0.69441\n",
      "\n",
      "Train set:\n",
      "[[13995   853]\n",
      " [ 1595  3094]]\n",
      "Accuracy = 0.87470, F1 = 0.71654\n",
      "Validation set:\n",
      "[[3443  269]\n",
      " [ 385  787]]\n",
      "Accuracy = 0.86609, F1 = 0.70646\n",
      "\n",
      "dump/log/data2_knn.pkl\n",
      "Training accuracy: 87.50 +/- 0.19%\n",
      "Validation accuracy: 86.61 +/- 0.45%\n",
      "Training F1: 0.7180 +/- 0.0043%\n",
      "Validation F1: 0.6975 +/- 0.0093%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## FINAL MODEL\n",
    "params_knn = {\n",
    "    'n_neighbors': 21, # Avoid even numbers\n",
    "    'metric': 'euclidean',\n",
    "    'n_jobs': -1\n",
    "}\n",
    "knn = KNeighborsClassifier(**params_knn)\n",
    "\n",
    "cv_list, p_alltrain_knn = runL1ModelCV(knn, X_alltrain, y_alltrain,\n",
    "                                   cv_filename=\"data2_knn.pkl\",\n",
    "                                   best_threshold=False)\n",
    "\n",
    "printCVResults(\"data2_knn.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### L2 Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>xgb</th>\n",
       "      <th>lgbm</th>\n",
       "      <th>catboost</th>\n",
       "      <th>rf</th>\n",
       "      <th>knn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.188438</td>\n",
       "      <td>0.001086</td>\n",
       "      <td>0.077932</td>\n",
       "      <td>0.004340</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.290217</td>\n",
       "      <td>0.182166</td>\n",
       "      <td>0.261474</td>\n",
       "      <td>0.153495</td>\n",
       "      <td>0.095238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.312258</td>\n",
       "      <td>0.239552</td>\n",
       "      <td>0.232016</td>\n",
       "      <td>0.193719</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.567737</td>\n",
       "      <td>0.583062</td>\n",
       "      <td>0.594710</td>\n",
       "      <td>0.629694</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.779767</td>\n",
       "      <td>0.988964</td>\n",
       "      <td>0.864304</td>\n",
       "      <td>0.973980</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24416</th>\n",
       "      <td>0.732934</td>\n",
       "      <td>0.842465</td>\n",
       "      <td>0.777865</td>\n",
       "      <td>0.849297</td>\n",
       "      <td>0.904762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24417</th>\n",
       "      <td>0.217665</td>\n",
       "      <td>0.035573</td>\n",
       "      <td>0.123488</td>\n",
       "      <td>0.064482</td>\n",
       "      <td>0.047619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24418</th>\n",
       "      <td>0.188546</td>\n",
       "      <td>0.003795</td>\n",
       "      <td>0.102529</td>\n",
       "      <td>0.010624</td>\n",
       "      <td>0.047619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24419</th>\n",
       "      <td>0.188288</td>\n",
       "      <td>0.001833</td>\n",
       "      <td>0.064984</td>\n",
       "      <td>0.001460</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24420</th>\n",
       "      <td>0.666082</td>\n",
       "      <td>0.653510</td>\n",
       "      <td>0.688907</td>\n",
       "      <td>0.753654</td>\n",
       "      <td>0.619048</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24421 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            xgb      lgbm  catboost        rf       knn\n",
       "0      0.188438  0.001086  0.077932  0.004340  0.000000\n",
       "1      0.290217  0.182166  0.261474  0.153495  0.095238\n",
       "2      0.312258  0.239552  0.232016  0.193719  0.142857\n",
       "3      0.567737  0.583062  0.594710  0.629694  0.571429\n",
       "4      0.779767  0.988964  0.864304  0.973980  0.952381\n",
       "...         ...       ...       ...       ...       ...\n",
       "24416  0.732934  0.842465  0.777865  0.849297  0.904762\n",
       "24417  0.217665  0.035573  0.123488  0.064482  0.047619\n",
       "24418  0.188546  0.003795  0.102529  0.010624  0.047619\n",
       "24419  0.188288  0.001833  0.064984  0.001460  0.000000\n",
       "24420  0.666082  0.653510  0.688907  0.753654  0.619048\n",
       "\n",
       "[24421 rows x 5 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L2_dict = {\n",
    "    'xgb': p_alltrain_xgb,\n",
    "    'lgbm': p_alltrain_lgbm,\n",
    "    'catboost': p_alltrain_catboost,\n",
    "    'rf': p_alltrain_rf,\n",
    "    'knn': p_alltrain_knn,\n",
    "}\n",
    "L2_alltrain = pd.DataFrame(L2_dict)\n",
    "L2_alltrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr_l2_alltrain = L2_alltrain.corr(method='pearson')\n",
    "# corr_l2_test = allp_test.corr(method='pearson')\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,6))\n",
    "sns.heatmap(corr_l2_alltrain, square=True, annot=True, ax=ax1)\n",
    "# sns.heatmap(corr_l2_test, square=True, annot=True, ax=ax2)\n",
    "ax1.set_title(\"Training set\")\n",
    "ax2.set_title(\"Test set\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8725686908807994"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## AVERAGING\n",
    "L2_avgp_alltrain = L2_alltrain.mean(axis=1)\n",
    "L2_ypred_alltrain = (L2_avgp_alltrain > 0.5).astype(int)\n",
    "accuracy_score(y_alltrain, L2_ypred_alltrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "Train set:\n",
      "[[14076   772]\n",
      " [ 1617  3071]]\n",
      "Accuracy = 87.771, F1 = 71.996\n",
      "Validation set:\n",
      "[[3551  161]\n",
      " [ 442  731]]\n",
      "Accuracy = 87.656, F1 = 70.799\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "Train set:\n",
      "[[14043   805]\n",
      " [ 1564  3125]]\n",
      "Accuracy = 87.874, F1 = 72.514\n",
      "Validation set:\n",
      "[[3491  221]\n",
      " [ 401  771]]\n",
      "Accuracy = 87.265, F1 = 71.257\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "Train set:\n",
      "[[13994   854]\n",
      " [ 1524  3165]]\n",
      "Accuracy = 87.828, F1 = 72.692\n",
      "Validation set:\n",
      "[[3482  230]\n",
      " [ 406  766]]\n",
      "Accuracy = 86.978, F1 = 70.664\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "Train set:\n",
      "[[13994   854]\n",
      " [ 1551  3138]]\n",
      "Accuracy = 87.690, F1 = 72.296\n",
      "Validation set:\n",
      "[[3484  228]\n",
      " [ 377  795]]\n",
      "Accuracy = 87.613, F1 = 72.437\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "Train set:\n",
      "[[14011   837]\n",
      " [ 1552  3137]]\n",
      "Accuracy = 87.772, F1 = 72.423\n",
      "Validation set:\n",
      "[[3455  257]\n",
      " [ 352  820]]\n",
      "Accuracy = 87.531, F1 = 72.921\n",
      "Saving CV predictions to: dump/log/l2_rf.pkl\n",
      "\n",
      "Train set:\n",
      "[[14076   772]\n",
      " [ 1617  3071]]\n",
      "Accuracy = 0.87771, F1 = 0.71996\n",
      "Validation set:\n",
      "[[3551  161]\n",
      " [ 442  731]]\n",
      "Accuracy = 0.87656, F1 = 0.70799\n",
      "\n",
      "Train set:\n",
      "[[14043   805]\n",
      " [ 1564  3125]]\n",
      "Accuracy = 0.87874, F1 = 0.72514\n",
      "Validation set:\n",
      "[[3491  221]\n",
      " [ 401  771]]\n",
      "Accuracy = 0.87265, F1 = 0.71257\n",
      "\n",
      "Train set:\n",
      "[[13994   854]\n",
      " [ 1524  3165]]\n",
      "Accuracy = 0.87828, F1 = 0.72692\n",
      "Validation set:\n",
      "[[3482  230]\n",
      " [ 406  766]]\n",
      "Accuracy = 0.86978, F1 = 0.70664\n",
      "\n",
      "Train set:\n",
      "[[13994   854]\n",
      " [ 1551  3138]]\n",
      "Accuracy = 0.87690, F1 = 0.72296\n",
      "Validation set:\n",
      "[[3484  228]\n",
      " [ 377  795]]\n",
      "Accuracy = 0.87613, F1 = 0.72437\n",
      "\n",
      "Train set:\n",
      "[[14011   837]\n",
      " [ 1552  3137]]\n",
      "Accuracy = 0.87772, F1 = 0.72423\n",
      "Validation set:\n",
      "[[3455  257]\n",
      " [ 352  820]]\n",
      "Accuracy = 0.87531, F1 = 0.72921\n",
      "\n",
      "dump/log/l2_rf.pkl\n",
      "Training accuracy: 87.79 +/- 0.06%\n",
      "Validation accuracy: 87.41 +/- 0.25%\n",
      "Training F1: 0.7238 +/- 0.0023%\n",
      "Validation F1: 0.7162 +/- 0.0090%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_model = {\n",
    "    'n_estimators': 100,\n",
    "    'min_samples_split': 2,\n",
    "    'min_samples_leaf': 1,\n",
    "    'max_depth': 6,\n",
    "    'bootstrap': True,\n",
    "    'max_samples': 0.8,\n",
    "    'n_jobs': -1,\n",
    "    'random_state': RAND_STATE\n",
    "}\n",
    "rf = RandomForestClassifier(**params_model)\n",
    "\n",
    "cv_list, p_alltrain_rf = runL1ModelCV(rf, L2_alltrain, y_alltrain,\n",
    "                                      cv_filename=\"l2_rf.pkl\",\n",
    "                                      best_threshold=False)\n",
    "printCVResults(\"l2_rf.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "##########\n",
      "Fold 0\n",
      "##########\n",
      "0:\tlearn: 0.6744977\ttotal: 13.8ms\tremaining: 1.37s\n",
      "99:\tlearn: 0.2861988\ttotal: 1.01s\tremaining: 0us\n",
      "Train set:\n",
      "[[13967   881]\n",
      " [ 1598  3090]]\n",
      "Accuracy = 87.311, F1 = 71.371\n",
      "Validation set:\n",
      "[[3555  157]\n",
      " [ 446  727]]\n",
      "Accuracy = 87.656, F1 = 70.685\n",
      "##########\n",
      "Fold 1\n",
      "##########\n",
      "0:\tlearn: 0.6743244\ttotal: 9.87ms\tremaining: 978ms\n",
      "99:\tlearn: 0.2847303\ttotal: 948ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13986   862]\n",
      " [ 1592  3097]]\n",
      "Accuracy = 87.439, F1 = 71.623\n",
      "Validation set:\n",
      "[[3490  222]\n",
      " [ 392  780]]\n",
      "Accuracy = 87.428, F1 = 71.757\n",
      "##########\n",
      "Fold 2\n",
      "##########\n",
      "0:\tlearn: 0.6743001\ttotal: 8.49ms\tremaining: 841ms\n",
      "99:\tlearn: 0.2847869\ttotal: 770ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13973   875]\n",
      " [ 1549  3140]]\n",
      "Accuracy = 87.593, F1 = 72.151\n",
      "Validation set:\n",
      "[[3489  223]\n",
      " [ 408  764]]\n",
      "Accuracy = 87.080, F1 = 70.774\n",
      "##########\n",
      "Fold 3\n",
      "##########\n",
      "0:\tlearn: 0.6743304\ttotal: 11.4ms\tremaining: 1.13s\n",
      "99:\tlearn: 0.2839377\ttotal: 739ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13928   920]\n",
      " [ 1532  3157]]\n",
      "Accuracy = 87.449, F1 = 72.028\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 369  803]]\n",
      "Accuracy = 87.613, F1 = 72.637\n",
      "##########\n",
      "Fold 4\n",
      "##########\n",
      "0:\tlearn: 0.6744050\ttotal: 15.5ms\tremaining: 1.53s\n",
      "99:\tlearn: 0.2858209\ttotal: 776ms\tremaining: 0us\n",
      "Train set:\n",
      "[[13973   875]\n",
      " [ 1575  3114]]\n",
      "Accuracy = 87.460, F1 = 71.768\n",
      "Validation set:\n",
      "[[3444  268]\n",
      " [ 350  822]]\n",
      "Accuracy = 87.346, F1 = 72.679\n",
      "Saving CV predictions to: dump/log/l2_catboost.pkl\n",
      "\n",
      "Train set:\n",
      "[[13967   881]\n",
      " [ 1598  3090]]\n",
      "Accuracy = 0.87311, F1 = 0.71371\n",
      "Validation set:\n",
      "[[3555  157]\n",
      " [ 446  727]]\n",
      "Accuracy = 0.87656, F1 = 0.70685\n",
      "\n",
      "Train set:\n",
      "[[13986   862]\n",
      " [ 1592  3097]]\n",
      "Accuracy = 0.87439, F1 = 0.71623\n",
      "Validation set:\n",
      "[[3490  222]\n",
      " [ 392  780]]\n",
      "Accuracy = 0.87428, F1 = 0.71757\n",
      "\n",
      "Train set:\n",
      "[[13973   875]\n",
      " [ 1549  3140]]\n",
      "Accuracy = 0.87593, F1 = 0.72151\n",
      "Validation set:\n",
      "[[3489  223]\n",
      " [ 408  764]]\n",
      "Accuracy = 0.87080, F1 = 0.70774\n",
      "\n",
      "Train set:\n",
      "[[13928   920]\n",
      " [ 1532  3157]]\n",
      "Accuracy = 0.87449, F1 = 0.72028\n",
      "Validation set:\n",
      "[[3476  236]\n",
      " [ 369  803]]\n",
      "Accuracy = 0.87613, F1 = 0.72637\n",
      "\n",
      "Train set:\n",
      "[[13973   875]\n",
      " [ 1575  3114]]\n",
      "Accuracy = 0.87460, F1 = 0.71768\n",
      "Validation set:\n",
      "[[3444  268]\n",
      " [ 350  822]]\n",
      "Accuracy = 0.87346, F1 = 0.72679\n",
      "\n",
      "dump/log/l2_catboost.pkl\n",
      "Training accuracy: 87.45 +/- 0.09%\n",
      "Validation accuracy: 87.42 +/- 0.21%\n",
      "Training F1: 0.7179 +/- 0.0028%\n",
      "Validation F1: 0.7171 +/- 0.0086%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params_catboost3 = {\n",
    "    'iterations': 100, # n_estimators\n",
    "    'depth': 6,\n",
    "    'l2_leaf_reg': 1,\n",
    "    'scale_pos_weight': 1,\n",
    "    'random_seed': RAND_STATE\n",
    "}\n",
    "\n",
    "catboost = CatBoostClassifier(**params_catboost3)\n",
    "\n",
    "cv_list, p_alltrain = runL1ModelCV(catboost, L2_alltrain, y_alltrain,\n",
    "                                   cv_filename=\"l2_catboost.pkl\",\n",
    "                                   best_threshold=False,\n",
    "                                   verbose=100)\n",
    "\n",
    "printCVResults(\"l2_catboost.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stacking\n",
    "#### Base models\n",
    "- Different preprocessing steps for different models\n",
    "- Z-score normalisation for logistic regression and neural networks\n",
    "- No need for monotonic normalisation functions for tree-based models\n",
    "- k-NN: Normalisation based on distance measure\n",
    "- GBMs require parameter tuning! (If learning rate is low it requires more trees)\n",
    "- Use PCA or t-SNE for preprocessing! -> For k-NN?\n",
    "\n",
    "#### Evaluation of base models\n",
    "-  To evaluate correlation between predictions of two models\n",
    "    1. Hamming distance\n",
    "    2. Matthew's correlation coefficient\n",
    "\n",
    "#### Final predictive layer\n",
    "- Majority voting: Wisdom of crowd\n",
    "- Logistic regression: Weighing of the models?\n",
    "- Decision tree:  If this model predicts 1 it is 100% correct else depend on prediction from other model\n",
    "- Neural network: Learn patterns?\n",
    "\n",
    "### Questions\n",
    "- How to use linear regression to blend predictions in a classification task?\n",
    "- Feature importance sorted by Gini index?\n",
    "- Evaluation: Use of micro vs macro scores?\n",
    "- How to deal with class imbalance?\n",
    "\n",
    "### To-do\n",
    "1. EDA: PCA and t-SNE\n",
    "\n",
    "### Thoughts\n",
    "- Models find it easy to differentiate one subset of negative samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "### END GAME\n",
    "from sklearn.ensemble import StackingClassifier\n",
    "\n",
    "base_models = [\n",
    "    ('RF', RandomForestClassifier(n_estimators=10, random_state=42)),\n",
    "    ('XGB', XGBClassifier())\n",
    "]\n",
    "\n",
    "layer1 = StackingClassifier(estimators=base_models,\n",
    "                            final_estimator=DecisionTreeClassifier())\n",
    "layer1.fit(X_train, y_train)\n",
    "stack_pred_vld = layer1.predict(X_vld)\n",
    "\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "hard_voting = VotingClassifier(estimators=base_models,\n",
    "                              voting=\"hard\",\n",
    "                              weights=[2,1])\n",
    "hard_voting.fit(X_train, y_train)\n",
    "hardvoting_pred_vld = hard_voting.predict(X_vld)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Stack 1: 9 models (Balance & Imbalance & KNN)\n",
    "* Stack 2: 9 models (Balance & Imbalance & KNN) + 4 PCA features"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
